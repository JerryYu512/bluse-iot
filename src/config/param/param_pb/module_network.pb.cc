// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module_network.proto

#include "module_network.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace biot {
PROTOBUF_CONSTEXPR BiotAppLanParam::BiotAppLanParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.if_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mac_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ipv4_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ipv6_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.submask_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gateway_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dns_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.cfg_type_)*/0
  , /*decltype(_impl_.mtu_)*/0u
  , /*decltype(_impl_.x1_)*/0
  , /*decltype(_impl_.x2_)*/0
  , /*decltype(_impl_.x3_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BiotAppLanParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BiotAppLanParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BiotAppLanParamDefaultTypeInternal() {}
  union {
    BiotAppLanParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BiotAppLanParamDefaultTypeInternal _BiotAppLanParam_default_instance_;
PROTOBUF_CONSTEXPR BiotAppWebServiceParam::BiotAppWebServiceParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.root_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.http_port_)*/0u
  , /*decltype(_impl_.https_port_)*/0u
  , /*decltype(_impl_.http_)*/false
  , /*decltype(_impl_.https_)*/false
  , /*decltype(_impl_.connect_max_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BiotAppWebServiceParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BiotAppWebServiceParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BiotAppWebServiceParamDefaultTypeInternal() {}
  union {
    BiotAppWebServiceParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BiotAppWebServiceParamDefaultTypeInternal _BiotAppWebServiceParam_default_instance_;
PROTOBUF_CONSTEXPR BiotAppOatppApi::BiotAppOatppApi(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.ipv4_)*/0u
  , /*decltype(_impl_.body_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BiotAppOatppApiDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BiotAppOatppApiDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BiotAppOatppApiDefaultTypeInternal() {}
  union {
    BiotAppOatppApi _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BiotAppOatppApiDefaultTypeInternal _BiotAppOatppApi_default_instance_;
PROTOBUF_CONSTEXPR BiotAppCmdApi::BiotAppCmdApi(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_.ipv4_)*/0u
  , /*decltype(_impl_.trans_)*/0
  , /*decltype(_impl_.body_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BiotAppCmdApiDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BiotAppCmdApiDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BiotAppCmdApiDefaultTypeInternal() {}
  union {
    BiotAppCmdApi _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BiotAppCmdApiDefaultTypeInternal _BiotAppCmdApi_default_instance_;
PROTOBUF_CONSTEXPR BiotAppRtsp::BiotAppRtsp(
    ::_pbi::ConstantInitialized) {}
struct BiotAppRtspDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BiotAppRtspDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BiotAppRtspDefaultTypeInternal() {}
  union {
    BiotAppRtsp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BiotAppRtspDefaultTypeInternal _BiotAppRtsp_default_instance_;
PROTOBUF_CONSTEXPR BiotAppNetwork::BiotAppNetwork(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lan_)*/{}
  , /*decltype(_impl_.web_)*/nullptr
  , /*decltype(_impl_.openapi_)*/nullptr
  , /*decltype(_impl_.cmdapi_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BiotAppNetworkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BiotAppNetworkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BiotAppNetworkDefaultTypeInternal() {}
  union {
    BiotAppNetwork _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BiotAppNetworkDefaultTypeInternal _BiotAppNetwork_default_instance_;
}  // namespace biot
static ::_pb::Metadata file_level_metadata_module_5fnetwork_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_module_5fnetwork_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_module_5fnetwork_2eproto = nullptr;

const uint32_t TableStruct_module_5fnetwork_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppLanParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppLanParam, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppLanParam, _impl_.cfg_type_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppLanParam, _impl_.if_name_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppLanParam, _impl_.mac_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppLanParam, _impl_.ipv4_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppLanParam, _impl_.ipv6_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppLanParam, _impl_.submask_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppLanParam, _impl_.gateway_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppLanParam, _impl_.mtu_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppLanParam, _impl_.dns_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppLanParam, _impl_.x1_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppLanParam, _impl_.x2_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppLanParam, _impl_.x3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppWebServiceParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppWebServiceParam, _impl_.http_port_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppWebServiceParam, _impl_.https_port_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppWebServiceParam, _impl_.http_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppWebServiceParam, _impl_.https_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppWebServiceParam, _impl_.root_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppWebServiceParam, _impl_.connect_max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppOatppApi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppOatppApi, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppOatppApi, _impl_.ipv4_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppOatppApi, _impl_.body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppCmdApi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppCmdApi, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppCmdApi, _impl_.ipv4_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppCmdApi, _impl_.trans_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppCmdApi, _impl_.body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppRtsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppNetwork, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppNetwork, _impl_.lan_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppNetwork, _impl_.web_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppNetwork, _impl_.openapi_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppNetwork, _impl_.cmdapi_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::biot::BiotAppLanParam)},
  { 19, -1, -1, sizeof(::biot::BiotAppWebServiceParam)},
  { 31, -1, -1, sizeof(::biot::BiotAppOatppApi)},
  { 40, -1, -1, sizeof(::biot::BiotAppCmdApi)},
  { 50, -1, -1, sizeof(::biot::BiotAppRtsp)},
  { 56, -1, -1, sizeof(::biot::BiotAppNetwork)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::biot::_BiotAppLanParam_default_instance_._instance,
  &::biot::_BiotAppWebServiceParam_default_instance_._instance,
  &::biot::_BiotAppOatppApi_default_instance_._instance,
  &::biot::_BiotAppCmdApi_default_instance_._instance,
  &::biot::_BiotAppRtsp_default_instance_._instance,
  &::biot::_BiotAppNetwork_default_instance_._instance,
};

const char descriptor_table_protodef_module_5fnetwork_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024module_network.proto\022\004biot\032\025enums/e_ne"
  "twork.proto\"\357\001\n\017BiotAppLanParam\022\036\n\004type\030"
  "\001 \001(\0162\020.biot.NetLanType\022\"\n\010cfg_type\030\002 \001("
  "\0162\020.biot.NetCfgType\022\017\n\007if_name\030\003 \001(\t\022\013\n\003"
  "mac\030\004 \001(\t\022\014\n\004ipv4\030\005 \001(\t\022\014\n\004ipv6\030\006 \001(\t\022\017\n"
  "\007submask\030\007 \001(\t\022\017\n\007gateway\030\010 \001(\t\022\013\n\003mtu\030\t"
  " \001(\r\022\013\n\003dns\030\n \001(\t\022\n\n\002x1\030\013 \001(\002\022\n\n\002x2\030\014 \001("
  "\001\022\n\n\002x3\030\r \001(\010\"\177\n\026BiotAppWebServiceParam\022"
  "\021\n\thttp_port\030\001 \001(\r\022\022\n\nhttps_port\030\002 \001(\r\022\014"
  "\n\004http\030\003 \001(\010\022\r\n\005https\030\004 \001(\010\022\014\n\004root\030\005 \001("
  "\t\022\023\n\013connect_max\030\006 \001(\r\"W\n\017BiotAppOatppAp"
  "i\022\014\n\004port\030\001 \001(\r\022\014\n\004ipv4\030\002 \001(\r\022(\n\004body\030\003 "
  "\001(\0162\032.biot.BiotAppModulePayload\"\201\001\n\rBiot"
  "AppCmdApi\022\014\n\004port\030\001 \001(\r\022\014\n\004ipv4\030\002 \001(\r\022*\n"
  "\005trans\030\003 \001(\0162\033.biot.BiotAppModuleProtoco"
  "l\022(\n\004body\030\004 \001(\0162\032.biot.BiotAppModulePayl"
  "oad\"\r\n\013BiotAppRtsp\"\254\001\n\016BiotAppNetwork\022\"\n"
  "\003lan\030\001 \003(\0132\025.biot.BiotAppLanParam\022)\n\003web"
  "\030\002 \001(\0132\034.biot.BiotAppWebServiceParam\022&\n\007"
  "openapi\030\003 \001(\0132\025.biot.BiotAppOatppApi\022#\n\006"
  "cmdapi\030\004 \001(\0132\023.biot.BiotAppCmdApib\006proto"
  "3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_module_5fnetwork_2eproto_deps[1] = {
  &::descriptor_table_enums_2fe_5fnetwork_2eproto,
};
static ::_pbi::once_flag descriptor_table_module_5fnetwork_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_module_5fnetwork_2eproto = {
    false, false, 841, descriptor_table_protodef_module_5fnetwork_2eproto,
    "module_network.proto",
    &descriptor_table_module_5fnetwork_2eproto_once, descriptor_table_module_5fnetwork_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_module_5fnetwork_2eproto::offsets,
    file_level_metadata_module_5fnetwork_2eproto, file_level_enum_descriptors_module_5fnetwork_2eproto,
    file_level_service_descriptors_module_5fnetwork_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_module_5fnetwork_2eproto_getter() {
  return &descriptor_table_module_5fnetwork_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_module_5fnetwork_2eproto(&descriptor_table_module_5fnetwork_2eproto);
namespace biot {

// ===================================================================

class BiotAppLanParam::_Internal {
 public:
};

BiotAppLanParam::BiotAppLanParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:biot.BiotAppLanParam)
}
BiotAppLanParam::BiotAppLanParam(const BiotAppLanParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.if_name_){}
    , decltype(_impl_.mac_){}
    , decltype(_impl_.ipv4_){}
    , decltype(_impl_.ipv6_){}
    , decltype(_impl_.submask_){}
    , decltype(_impl_.gateway_){}
    , decltype(_impl_.dns_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.cfg_type_){}
    , decltype(_impl_.mtu_){}
    , decltype(_impl_.x1_){}
    , decltype(_impl_.x2_){}
    , decltype(_impl_.x3_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.if_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.if_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_if_name().empty()) {
    _impl_.if_name_.Set(from._internal_if_name(), 
      GetArenaForAllocation());
  }
  _impl_.mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mac().empty()) {
    _impl_.mac_.Set(from._internal_mac(), 
      GetArenaForAllocation());
  }
  _impl_.ipv4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipv4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ipv4().empty()) {
    _impl_.ipv4_.Set(from._internal_ipv4(), 
      GetArenaForAllocation());
  }
  _impl_.ipv6_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipv6_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ipv6().empty()) {
    _impl_.ipv6_.Set(from._internal_ipv6(), 
      GetArenaForAllocation());
  }
  _impl_.submask_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.submask_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_submask().empty()) {
    _impl_.submask_.Set(from._internal_submask(), 
      GetArenaForAllocation());
  }
  _impl_.gateway_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gateway_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gateway().empty()) {
    _impl_.gateway_.Set(from._internal_gateway(), 
      GetArenaForAllocation());
  }
  _impl_.dns_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dns_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dns().empty()) {
    _impl_.dns_.Set(from._internal_dns(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.x3_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.x3_));
  // @@protoc_insertion_point(copy_constructor:biot.BiotAppLanParam)
}

inline void BiotAppLanParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.if_name_){}
    , decltype(_impl_.mac_){}
    , decltype(_impl_.ipv4_){}
    , decltype(_impl_.ipv6_){}
    , decltype(_impl_.submask_){}
    , decltype(_impl_.gateway_){}
    , decltype(_impl_.dns_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.cfg_type_){0}
    , decltype(_impl_.mtu_){0u}
    , decltype(_impl_.x1_){0}
    , decltype(_impl_.x2_){0}
    , decltype(_impl_.x3_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.if_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.if_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ipv4_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipv4_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ipv6_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ipv6_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.submask_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.submask_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gateway_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gateway_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dns_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dns_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BiotAppLanParam::~BiotAppLanParam() {
  // @@protoc_insertion_point(destructor:biot.BiotAppLanParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BiotAppLanParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.if_name_.Destroy();
  _impl_.mac_.Destroy();
  _impl_.ipv4_.Destroy();
  _impl_.ipv6_.Destroy();
  _impl_.submask_.Destroy();
  _impl_.gateway_.Destroy();
  _impl_.dns_.Destroy();
}

void BiotAppLanParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BiotAppLanParam::Clear() {
// @@protoc_insertion_point(message_clear_start:biot.BiotAppLanParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.if_name_.ClearToEmpty();
  _impl_.mac_.ClearToEmpty();
  _impl_.ipv4_.ClearToEmpty();
  _impl_.ipv6_.ClearToEmpty();
  _impl_.submask_.ClearToEmpty();
  _impl_.gateway_.ClearToEmpty();
  _impl_.dns_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.x3_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.x3_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BiotAppLanParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .biot.NetLanType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::biot::NetLanType>(val));
        } else
          goto handle_unusual;
        continue;
      // .biot.NetCfgType cfg_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cfg_type(static_cast<::biot::NetCfgType>(val));
        } else
          goto handle_unusual;
        continue;
      // string if_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_if_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "biot.BiotAppLanParam.if_name"));
        } else
          goto handle_unusual;
        continue;
      // string mac = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mac();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "biot.BiotAppLanParam.mac"));
        } else
          goto handle_unusual;
        continue;
      // string ipv4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ipv4();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "biot.BiotAppLanParam.ipv4"));
        } else
          goto handle_unusual;
        continue;
      // string ipv6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ipv6();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "biot.BiotAppLanParam.ipv6"));
        } else
          goto handle_unusual;
        continue;
      // string submask = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_submask();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "biot.BiotAppLanParam.submask"));
        } else
          goto handle_unusual;
        continue;
      // string gateway = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_gateway();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "biot.BiotAppLanParam.gateway"));
        } else
          goto handle_unusual;
        continue;
      // uint32 mtu = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.mtu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dns = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_dns();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "biot.BiotAppLanParam.dns"));
        } else
          goto handle_unusual;
        continue;
      // float x1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.x1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double x2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.x2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool x3 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.x3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BiotAppLanParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:biot.BiotAppLanParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .biot.NetLanType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .biot.NetCfgType cfg_type = 2;
  if (this->_internal_cfg_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_cfg_type(), target);
  }

  // string if_name = 3;
  if (!this->_internal_if_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_if_name().data(), static_cast<int>(this->_internal_if_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "biot.BiotAppLanParam.if_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_if_name(), target);
  }

  // string mac = 4;
  if (!this->_internal_mac().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mac().data(), static_cast<int>(this->_internal_mac().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "biot.BiotAppLanParam.mac");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mac(), target);
  }

  // string ipv4 = 5;
  if (!this->_internal_ipv4().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipv4().data(), static_cast<int>(this->_internal_ipv4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "biot.BiotAppLanParam.ipv4");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ipv4(), target);
  }

  // string ipv6 = 6;
  if (!this->_internal_ipv6().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipv6().data(), static_cast<int>(this->_internal_ipv6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "biot.BiotAppLanParam.ipv6");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ipv6(), target);
  }

  // string submask = 7;
  if (!this->_internal_submask().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_submask().data(), static_cast<int>(this->_internal_submask().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "biot.BiotAppLanParam.submask");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_submask(), target);
  }

  // string gateway = 8;
  if (!this->_internal_gateway().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gateway().data(), static_cast<int>(this->_internal_gateway().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "biot.BiotAppLanParam.gateway");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_gateway(), target);
  }

  // uint32 mtu = 9;
  if (this->_internal_mtu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_mtu(), target);
  }

  // string dns = 10;
  if (!this->_internal_dns().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dns().data(), static_cast<int>(this->_internal_dns().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "biot.BiotAppLanParam.dns");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_dns(), target);
  }

  // float x1 = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x1 = this->_internal_x1();
  uint32_t raw_x1;
  memcpy(&raw_x1, &tmp_x1, sizeof(tmp_x1));
  if (raw_x1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_x1(), target);
  }

  // double x2 = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x2 = this->_internal_x2();
  uint64_t raw_x2;
  memcpy(&raw_x2, &tmp_x2, sizeof(tmp_x2));
  if (raw_x2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_x2(), target);
  }

  // bool x3 = 13;
  if (this->_internal_x3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_x3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:biot.BiotAppLanParam)
  return target;
}

size_t BiotAppLanParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:biot.BiotAppLanParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string if_name = 3;
  if (!this->_internal_if_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_if_name());
  }

  // string mac = 4;
  if (!this->_internal_mac().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mac());
  }

  // string ipv4 = 5;
  if (!this->_internal_ipv4().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipv4());
  }

  // string ipv6 = 6;
  if (!this->_internal_ipv6().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipv6());
  }

  // string submask = 7;
  if (!this->_internal_submask().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_submask());
  }

  // string gateway = 8;
  if (!this->_internal_gateway().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gateway());
  }

  // string dns = 10;
  if (!this->_internal_dns().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dns());
  }

  // .biot.NetLanType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .biot.NetCfgType cfg_type = 2;
  if (this->_internal_cfg_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cfg_type());
  }

  // uint32 mtu = 9;
  if (this->_internal_mtu() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mtu());
  }

  // float x1 = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x1 = this->_internal_x1();
  uint32_t raw_x1;
  memcpy(&raw_x1, &tmp_x1, sizeof(tmp_x1));
  if (raw_x1 != 0) {
    total_size += 1 + 4;
  }

  // double x2 = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x2 = this->_internal_x2();
  uint64_t raw_x2;
  memcpy(&raw_x2, &tmp_x2, sizeof(tmp_x2));
  if (raw_x2 != 0) {
    total_size += 1 + 8;
  }

  // bool x3 = 13;
  if (this->_internal_x3() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BiotAppLanParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BiotAppLanParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BiotAppLanParam::GetClassData() const { return &_class_data_; }

void BiotAppLanParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BiotAppLanParam *>(to)->MergeFrom(
      static_cast<const BiotAppLanParam &>(from));
}


void BiotAppLanParam::MergeFrom(const BiotAppLanParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:biot.BiotAppLanParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_if_name().empty()) {
    _internal_set_if_name(from._internal_if_name());
  }
  if (!from._internal_mac().empty()) {
    _internal_set_mac(from._internal_mac());
  }
  if (!from._internal_ipv4().empty()) {
    _internal_set_ipv4(from._internal_ipv4());
  }
  if (!from._internal_ipv6().empty()) {
    _internal_set_ipv6(from._internal_ipv6());
  }
  if (!from._internal_submask().empty()) {
    _internal_set_submask(from._internal_submask());
  }
  if (!from._internal_gateway().empty()) {
    _internal_set_gateway(from._internal_gateway());
  }
  if (!from._internal_dns().empty()) {
    _internal_set_dns(from._internal_dns());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_cfg_type() != 0) {
    _internal_set_cfg_type(from._internal_cfg_type());
  }
  if (from._internal_mtu() != 0) {
    _internal_set_mtu(from._internal_mtu());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x1 = from._internal_x1();
  uint32_t raw_x1;
  memcpy(&raw_x1, &tmp_x1, sizeof(tmp_x1));
  if (raw_x1 != 0) {
    _internal_set_x1(from._internal_x1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x2 = from._internal_x2();
  uint64_t raw_x2;
  memcpy(&raw_x2, &tmp_x2, sizeof(tmp_x2));
  if (raw_x2 != 0) {
    _internal_set_x2(from._internal_x2());
  }
  if (from._internal_x3() != 0) {
    _internal_set_x3(from._internal_x3());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BiotAppLanParam::CopyFrom(const BiotAppLanParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:biot.BiotAppLanParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiotAppLanParam::IsInitialized() const {
  return true;
}

void BiotAppLanParam::InternalSwap(BiotAppLanParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.if_name_, lhs_arena,
      &other->_impl_.if_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mac_, lhs_arena,
      &other->_impl_.mac_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ipv4_, lhs_arena,
      &other->_impl_.ipv4_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ipv6_, lhs_arena,
      &other->_impl_.ipv6_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.submask_, lhs_arena,
      &other->_impl_.submask_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gateway_, lhs_arena,
      &other->_impl_.gateway_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dns_, lhs_arena,
      &other->_impl_.dns_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BiotAppLanParam, _impl_.x3_)
      + sizeof(BiotAppLanParam::_impl_.x3_)
      - PROTOBUF_FIELD_OFFSET(BiotAppLanParam, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BiotAppLanParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_module_5fnetwork_2eproto_getter, &descriptor_table_module_5fnetwork_2eproto_once,
      file_level_metadata_module_5fnetwork_2eproto[0]);
}

// ===================================================================

class BiotAppWebServiceParam::_Internal {
 public:
};

BiotAppWebServiceParam::BiotAppWebServiceParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:biot.BiotAppWebServiceParam)
}
BiotAppWebServiceParam::BiotAppWebServiceParam(const BiotAppWebServiceParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.root_){}
    , decltype(_impl_.http_port_){}
    , decltype(_impl_.https_port_){}
    , decltype(_impl_.http_){}
    , decltype(_impl_.https_){}
    , decltype(_impl_.connect_max_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_root().empty()) {
    _impl_.root_.Set(from._internal_root(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.http_port_, &from._impl_.http_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.connect_max_) -
    reinterpret_cast<char*>(&_impl_.http_port_)) + sizeof(_impl_.connect_max_));
  // @@protoc_insertion_point(copy_constructor:biot.BiotAppWebServiceParam)
}

inline void BiotAppWebServiceParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.root_){}
    , decltype(_impl_.http_port_){0u}
    , decltype(_impl_.https_port_){0u}
    , decltype(_impl_.http_){false}
    , decltype(_impl_.https_){false}
    , decltype(_impl_.connect_max_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.root_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.root_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BiotAppWebServiceParam::~BiotAppWebServiceParam() {
  // @@protoc_insertion_point(destructor:biot.BiotAppWebServiceParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BiotAppWebServiceParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.root_.Destroy();
}

void BiotAppWebServiceParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BiotAppWebServiceParam::Clear() {
// @@protoc_insertion_point(message_clear_start:biot.BiotAppWebServiceParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.root_.ClearToEmpty();
  ::memset(&_impl_.http_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.connect_max_) -
      reinterpret_cast<char*>(&_impl_.http_port_)) + sizeof(_impl_.connect_max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BiotAppWebServiceParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 http_port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.http_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 https_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.https_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool http = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.http_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool https = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.https_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string root = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_root();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "biot.BiotAppWebServiceParam.root"));
        } else
          goto handle_unusual;
        continue;
      // uint32 connect_max = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.connect_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BiotAppWebServiceParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:biot.BiotAppWebServiceParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 http_port = 1;
  if (this->_internal_http_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_http_port(), target);
  }

  // uint32 https_port = 2;
  if (this->_internal_https_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_https_port(), target);
  }

  // bool http = 3;
  if (this->_internal_http() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_http(), target);
  }

  // bool https = 4;
  if (this->_internal_https() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_https(), target);
  }

  // string root = 5;
  if (!this->_internal_root().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_root().data(), static_cast<int>(this->_internal_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "biot.BiotAppWebServiceParam.root");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_root(), target);
  }

  // uint32 connect_max = 6;
  if (this->_internal_connect_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_connect_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:biot.BiotAppWebServiceParam)
  return target;
}

size_t BiotAppWebServiceParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:biot.BiotAppWebServiceParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string root = 5;
  if (!this->_internal_root().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_root());
  }

  // uint32 http_port = 1;
  if (this->_internal_http_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_http_port());
  }

  // uint32 https_port = 2;
  if (this->_internal_https_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_https_port());
  }

  // bool http = 3;
  if (this->_internal_http() != 0) {
    total_size += 1 + 1;
  }

  // bool https = 4;
  if (this->_internal_https() != 0) {
    total_size += 1 + 1;
  }

  // uint32 connect_max = 6;
  if (this->_internal_connect_max() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_connect_max());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BiotAppWebServiceParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BiotAppWebServiceParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BiotAppWebServiceParam::GetClassData() const { return &_class_data_; }

void BiotAppWebServiceParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BiotAppWebServiceParam *>(to)->MergeFrom(
      static_cast<const BiotAppWebServiceParam &>(from));
}


void BiotAppWebServiceParam::MergeFrom(const BiotAppWebServiceParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:biot.BiotAppWebServiceParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_root().empty()) {
    _internal_set_root(from._internal_root());
  }
  if (from._internal_http_port() != 0) {
    _internal_set_http_port(from._internal_http_port());
  }
  if (from._internal_https_port() != 0) {
    _internal_set_https_port(from._internal_https_port());
  }
  if (from._internal_http() != 0) {
    _internal_set_http(from._internal_http());
  }
  if (from._internal_https() != 0) {
    _internal_set_https(from._internal_https());
  }
  if (from._internal_connect_max() != 0) {
    _internal_set_connect_max(from._internal_connect_max());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BiotAppWebServiceParam::CopyFrom(const BiotAppWebServiceParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:biot.BiotAppWebServiceParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiotAppWebServiceParam::IsInitialized() const {
  return true;
}

void BiotAppWebServiceParam::InternalSwap(BiotAppWebServiceParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.root_, lhs_arena,
      &other->_impl_.root_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BiotAppWebServiceParam, _impl_.connect_max_)
      + sizeof(BiotAppWebServiceParam::_impl_.connect_max_)
      - PROTOBUF_FIELD_OFFSET(BiotAppWebServiceParam, _impl_.http_port_)>(
          reinterpret_cast<char*>(&_impl_.http_port_),
          reinterpret_cast<char*>(&other->_impl_.http_port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BiotAppWebServiceParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_module_5fnetwork_2eproto_getter, &descriptor_table_module_5fnetwork_2eproto_once,
      file_level_metadata_module_5fnetwork_2eproto[1]);
}

// ===================================================================

class BiotAppOatppApi::_Internal {
 public:
};

BiotAppOatppApi::BiotAppOatppApi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:biot.BiotAppOatppApi)
}
BiotAppOatppApi::BiotAppOatppApi(const BiotAppOatppApi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.port_){}
    , decltype(_impl_.ipv4_){}
    , decltype(_impl_.body_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.body_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.body_));
  // @@protoc_insertion_point(copy_constructor:biot.BiotAppOatppApi)
}

inline void BiotAppOatppApi::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.port_){0u}
    , decltype(_impl_.ipv4_){0u}
    , decltype(_impl_.body_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BiotAppOatppApi::~BiotAppOatppApi() {
  // @@protoc_insertion_point(destructor:biot.BiotAppOatppApi)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BiotAppOatppApi::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BiotAppOatppApi::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BiotAppOatppApi::Clear() {
// @@protoc_insertion_point(message_clear_start:biot.BiotAppOatppApi)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.body_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.body_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BiotAppOatppApi::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ipv4 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .biot.BiotAppModulePayload body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_body(static_cast<::biot::BiotAppModulePayload>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BiotAppOatppApi::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:biot.BiotAppOatppApi)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_port(), target);
  }

  // uint32 ipv4 = 2;
  if (this->_internal_ipv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ipv4(), target);
  }

  // .biot.BiotAppModulePayload body = 3;
  if (this->_internal_body() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:biot.BiotAppOatppApi)
  return target;
}

size_t BiotAppOatppApi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:biot.BiotAppOatppApi)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // uint32 ipv4 = 2;
  if (this->_internal_ipv4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ipv4());
  }

  // .biot.BiotAppModulePayload body = 3;
  if (this->_internal_body() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_body());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BiotAppOatppApi::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BiotAppOatppApi::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BiotAppOatppApi::GetClassData() const { return &_class_data_; }

void BiotAppOatppApi::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BiotAppOatppApi *>(to)->MergeFrom(
      static_cast<const BiotAppOatppApi &>(from));
}


void BiotAppOatppApi::MergeFrom(const BiotAppOatppApi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:biot.BiotAppOatppApi)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from._internal_ipv4() != 0) {
    _internal_set_ipv4(from._internal_ipv4());
  }
  if (from._internal_body() != 0) {
    _internal_set_body(from._internal_body());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BiotAppOatppApi::CopyFrom(const BiotAppOatppApi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:biot.BiotAppOatppApi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiotAppOatppApi::IsInitialized() const {
  return true;
}

void BiotAppOatppApi::InternalSwap(BiotAppOatppApi* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BiotAppOatppApi, _impl_.body_)
      + sizeof(BiotAppOatppApi::_impl_.body_)
      - PROTOBUF_FIELD_OFFSET(BiotAppOatppApi, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BiotAppOatppApi::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_module_5fnetwork_2eproto_getter, &descriptor_table_module_5fnetwork_2eproto_once,
      file_level_metadata_module_5fnetwork_2eproto[2]);
}

// ===================================================================

class BiotAppCmdApi::_Internal {
 public:
};

BiotAppCmdApi::BiotAppCmdApi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:biot.BiotAppCmdApi)
}
BiotAppCmdApi::BiotAppCmdApi(const BiotAppCmdApi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.port_){}
    , decltype(_impl_.ipv4_){}
    , decltype(_impl_.trans_){}
    , decltype(_impl_.body_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.body_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.body_));
  // @@protoc_insertion_point(copy_constructor:biot.BiotAppCmdApi)
}

inline void BiotAppCmdApi::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.port_){0u}
    , decltype(_impl_.ipv4_){0u}
    , decltype(_impl_.trans_){0}
    , decltype(_impl_.body_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BiotAppCmdApi::~BiotAppCmdApi() {
  // @@protoc_insertion_point(destructor:biot.BiotAppCmdApi)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BiotAppCmdApi::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BiotAppCmdApi::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BiotAppCmdApi::Clear() {
// @@protoc_insertion_point(message_clear_start:biot.BiotAppCmdApi)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.body_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.body_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BiotAppCmdApi::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ipv4 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.ipv4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .biot.BiotAppModuleProtocol trans = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trans(static_cast<::biot::BiotAppModuleProtocol>(val));
        } else
          goto handle_unusual;
        continue;
      // .biot.BiotAppModulePayload body = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_body(static_cast<::biot::BiotAppModulePayload>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BiotAppCmdApi::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:biot.BiotAppCmdApi)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_port(), target);
  }

  // uint32 ipv4 = 2;
  if (this->_internal_ipv4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ipv4(), target);
  }

  // .biot.BiotAppModuleProtocol trans = 3;
  if (this->_internal_trans() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_trans(), target);
  }

  // .biot.BiotAppModulePayload body = 4;
  if (this->_internal_body() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:biot.BiotAppCmdApi)
  return target;
}

size_t BiotAppCmdApi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:biot.BiotAppCmdApi)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // uint32 ipv4 = 2;
  if (this->_internal_ipv4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ipv4());
  }

  // .biot.BiotAppModuleProtocol trans = 3;
  if (this->_internal_trans() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_trans());
  }

  // .biot.BiotAppModulePayload body = 4;
  if (this->_internal_body() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_body());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BiotAppCmdApi::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BiotAppCmdApi::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BiotAppCmdApi::GetClassData() const { return &_class_data_; }

void BiotAppCmdApi::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BiotAppCmdApi *>(to)->MergeFrom(
      static_cast<const BiotAppCmdApi &>(from));
}


void BiotAppCmdApi::MergeFrom(const BiotAppCmdApi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:biot.BiotAppCmdApi)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from._internal_ipv4() != 0) {
    _internal_set_ipv4(from._internal_ipv4());
  }
  if (from._internal_trans() != 0) {
    _internal_set_trans(from._internal_trans());
  }
  if (from._internal_body() != 0) {
    _internal_set_body(from._internal_body());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BiotAppCmdApi::CopyFrom(const BiotAppCmdApi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:biot.BiotAppCmdApi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiotAppCmdApi::IsInitialized() const {
  return true;
}

void BiotAppCmdApi::InternalSwap(BiotAppCmdApi* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BiotAppCmdApi, _impl_.body_)
      + sizeof(BiotAppCmdApi::_impl_.body_)
      - PROTOBUF_FIELD_OFFSET(BiotAppCmdApi, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BiotAppCmdApi::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_module_5fnetwork_2eproto_getter, &descriptor_table_module_5fnetwork_2eproto_once,
      file_level_metadata_module_5fnetwork_2eproto[3]);
}

// ===================================================================

class BiotAppRtsp::_Internal {
 public:
};

BiotAppRtsp::BiotAppRtsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:biot.BiotAppRtsp)
}
BiotAppRtsp::BiotAppRtsp(const BiotAppRtsp& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:biot.BiotAppRtsp)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BiotAppRtsp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BiotAppRtsp::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata BiotAppRtsp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_module_5fnetwork_2eproto_getter, &descriptor_table_module_5fnetwork_2eproto_once,
      file_level_metadata_module_5fnetwork_2eproto[4]);
}

// ===================================================================

class BiotAppNetwork::_Internal {
 public:
  static const ::biot::BiotAppWebServiceParam& web(const BiotAppNetwork* msg);
  static const ::biot::BiotAppOatppApi& openapi(const BiotAppNetwork* msg);
  static const ::biot::BiotAppCmdApi& cmdapi(const BiotAppNetwork* msg);
};

const ::biot::BiotAppWebServiceParam&
BiotAppNetwork::_Internal::web(const BiotAppNetwork* msg) {
  return *msg->_impl_.web_;
}
const ::biot::BiotAppOatppApi&
BiotAppNetwork::_Internal::openapi(const BiotAppNetwork* msg) {
  return *msg->_impl_.openapi_;
}
const ::biot::BiotAppCmdApi&
BiotAppNetwork::_Internal::cmdapi(const BiotAppNetwork* msg) {
  return *msg->_impl_.cmdapi_;
}
BiotAppNetwork::BiotAppNetwork(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:biot.BiotAppNetwork)
}
BiotAppNetwork::BiotAppNetwork(const BiotAppNetwork& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.lan_){from._impl_.lan_}
    , decltype(_impl_.web_){nullptr}
    , decltype(_impl_.openapi_){nullptr}
    , decltype(_impl_.cmdapi_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_web()) {
    _impl_.web_ = new ::biot::BiotAppWebServiceParam(*from._impl_.web_);
  }
  if (from._internal_has_openapi()) {
    _impl_.openapi_ = new ::biot::BiotAppOatppApi(*from._impl_.openapi_);
  }
  if (from._internal_has_cmdapi()) {
    _impl_.cmdapi_ = new ::biot::BiotAppCmdApi(*from._impl_.cmdapi_);
  }
  // @@protoc_insertion_point(copy_constructor:biot.BiotAppNetwork)
}

inline void BiotAppNetwork::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lan_){arena}
    , decltype(_impl_.web_){nullptr}
    , decltype(_impl_.openapi_){nullptr}
    , decltype(_impl_.cmdapi_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BiotAppNetwork::~BiotAppNetwork() {
  // @@protoc_insertion_point(destructor:biot.BiotAppNetwork)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BiotAppNetwork::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lan_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.web_;
  if (this != internal_default_instance()) delete _impl_.openapi_;
  if (this != internal_default_instance()) delete _impl_.cmdapi_;
}

void BiotAppNetwork::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BiotAppNetwork::Clear() {
// @@protoc_insertion_point(message_clear_start:biot.BiotAppNetwork)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lan_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.web_ != nullptr) {
    delete _impl_.web_;
  }
  _impl_.web_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.openapi_ != nullptr) {
    delete _impl_.openapi_;
  }
  _impl_.openapi_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cmdapi_ != nullptr) {
    delete _impl_.cmdapi_;
  }
  _impl_.cmdapi_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BiotAppNetwork::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .biot.BiotAppLanParam lan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lan(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .biot.BiotAppWebServiceParam web = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_web(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .biot.BiotAppOatppApi openapi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_openapi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .biot.BiotAppCmdApi cmdapi = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cmdapi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BiotAppNetwork::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:biot.BiotAppNetwork)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .biot.BiotAppLanParam lan = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lan_size()); i < n; i++) {
    const auto& repfield = this->_internal_lan(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .biot.BiotAppWebServiceParam web = 2;
  if (this->_internal_has_web()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::web(this),
        _Internal::web(this).GetCachedSize(), target, stream);
  }

  // .biot.BiotAppOatppApi openapi = 3;
  if (this->_internal_has_openapi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::openapi(this),
        _Internal::openapi(this).GetCachedSize(), target, stream);
  }

  // .biot.BiotAppCmdApi cmdapi = 4;
  if (this->_internal_has_cmdapi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::cmdapi(this),
        _Internal::cmdapi(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:biot.BiotAppNetwork)
  return target;
}

size_t BiotAppNetwork::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:biot.BiotAppNetwork)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .biot.BiotAppLanParam lan = 1;
  total_size += 1UL * this->_internal_lan_size();
  for (const auto& msg : this->_impl_.lan_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .biot.BiotAppWebServiceParam web = 2;
  if (this->_internal_has_web()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.web_);
  }

  // .biot.BiotAppOatppApi openapi = 3;
  if (this->_internal_has_openapi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.openapi_);
  }

  // .biot.BiotAppCmdApi cmdapi = 4;
  if (this->_internal_has_cmdapi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cmdapi_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BiotAppNetwork::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BiotAppNetwork::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BiotAppNetwork::GetClassData() const { return &_class_data_; }

void BiotAppNetwork::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BiotAppNetwork *>(to)->MergeFrom(
      static_cast<const BiotAppNetwork &>(from));
}


void BiotAppNetwork::MergeFrom(const BiotAppNetwork& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:biot.BiotAppNetwork)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.lan_.MergeFrom(from._impl_.lan_);
  if (from._internal_has_web()) {
    _internal_mutable_web()->::biot::BiotAppWebServiceParam::MergeFrom(from._internal_web());
  }
  if (from._internal_has_openapi()) {
    _internal_mutable_openapi()->::biot::BiotAppOatppApi::MergeFrom(from._internal_openapi());
  }
  if (from._internal_has_cmdapi()) {
    _internal_mutable_cmdapi()->::biot::BiotAppCmdApi::MergeFrom(from._internal_cmdapi());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BiotAppNetwork::CopyFrom(const BiotAppNetwork& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:biot.BiotAppNetwork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiotAppNetwork::IsInitialized() const {
  return true;
}

void BiotAppNetwork::InternalSwap(BiotAppNetwork* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lan_.InternalSwap(&other->_impl_.lan_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BiotAppNetwork, _impl_.cmdapi_)
      + sizeof(BiotAppNetwork::_impl_.cmdapi_)
      - PROTOBUF_FIELD_OFFSET(BiotAppNetwork, _impl_.web_)>(
          reinterpret_cast<char*>(&_impl_.web_),
          reinterpret_cast<char*>(&other->_impl_.web_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BiotAppNetwork::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_module_5fnetwork_2eproto_getter, &descriptor_table_module_5fnetwork_2eproto_once,
      file_level_metadata_module_5fnetwork_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace biot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::biot::BiotAppLanParam*
Arena::CreateMaybeMessage< ::biot::BiotAppLanParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::biot::BiotAppLanParam >(arena);
}
template<> PROTOBUF_NOINLINE ::biot::BiotAppWebServiceParam*
Arena::CreateMaybeMessage< ::biot::BiotAppWebServiceParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::biot::BiotAppWebServiceParam >(arena);
}
template<> PROTOBUF_NOINLINE ::biot::BiotAppOatppApi*
Arena::CreateMaybeMessage< ::biot::BiotAppOatppApi >(Arena* arena) {
  return Arena::CreateMessageInternal< ::biot::BiotAppOatppApi >(arena);
}
template<> PROTOBUF_NOINLINE ::biot::BiotAppCmdApi*
Arena::CreateMaybeMessage< ::biot::BiotAppCmdApi >(Arena* arena) {
  return Arena::CreateMessageInternal< ::biot::BiotAppCmdApi >(arena);
}
template<> PROTOBUF_NOINLINE ::biot::BiotAppRtsp*
Arena::CreateMaybeMessage< ::biot::BiotAppRtsp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::biot::BiotAppRtsp >(arena);
}
template<> PROTOBUF_NOINLINE ::biot::BiotAppNetwork*
Arena::CreateMaybeMessage< ::biot::BiotAppNetwork >(Arena* arena) {
  return Arena::CreateMessageInternal< ::biot::BiotAppNetwork >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
