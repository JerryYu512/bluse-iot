// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module_db.proto

#include "module_db.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace biot {
PROTOBUF_CONSTEXPR BiotAppDbLocal::BiotAppDbLocal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dbtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BiotAppDbLocalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BiotAppDbLocalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BiotAppDbLocalDefaultTypeInternal() {}
  union {
    BiotAppDbLocal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BiotAppDbLocalDefaultTypeInternal _BiotAppDbLocal_default_instance_;
PROTOBUF_CONSTEXPR BiotAppDb::BiotAppDb(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.localdb_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BiotAppDbDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BiotAppDbDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BiotAppDbDefaultTypeInternal() {}
  union {
    BiotAppDb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BiotAppDbDefaultTypeInternal _BiotAppDb_default_instance_;
}  // namespace biot
static ::_pb::Metadata file_level_metadata_module_5fdb_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_module_5fdb_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_module_5fdb_2eproto = nullptr;

const uint32_t TableStruct_module_5fdb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppDbLocal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppDbLocal, _impl_.dbtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppDb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppDb, _impl_.localdb_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::biot::BiotAppDbLocal)},
  { 7, -1, -1, sizeof(::biot::BiotAppDb)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::biot::_BiotAppDbLocal_default_instance_._instance,
  &::biot::_BiotAppDb_default_instance_._instance,
};

const char descriptor_table_protodef_module_5fdb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017module_db.proto\022\004biot\032\020enums/e_db.prot"
  "o\"5\n\016BiotAppDbLocal\022#\n\006dbtype\030\001 \001(\0162\023.bi"
  "ot.BiotAppDbType\"2\n\tBiotAppDb\022%\n\007localdb"
  "\030\001 \001(\0132\024.biot.BiotAppDbLocalb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_module_5fdb_2eproto_deps[1] = {
  &::descriptor_table_enums_2fe_5fdb_2eproto,
};
static ::_pbi::once_flag descriptor_table_module_5fdb_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_module_5fdb_2eproto = {
    false, false, 156, descriptor_table_protodef_module_5fdb_2eproto,
    "module_db.proto",
    &descriptor_table_module_5fdb_2eproto_once, descriptor_table_module_5fdb_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_module_5fdb_2eproto::offsets,
    file_level_metadata_module_5fdb_2eproto, file_level_enum_descriptors_module_5fdb_2eproto,
    file_level_service_descriptors_module_5fdb_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_module_5fdb_2eproto_getter() {
  return &descriptor_table_module_5fdb_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_module_5fdb_2eproto(&descriptor_table_module_5fdb_2eproto);
namespace biot {

// ===================================================================

class BiotAppDbLocal::_Internal {
 public:
};

BiotAppDbLocal::BiotAppDbLocal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:biot.BiotAppDbLocal)
}
BiotAppDbLocal::BiotAppDbLocal(const BiotAppDbLocal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.dbtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dbtype_ = from._impl_.dbtype_;
  // @@protoc_insertion_point(copy_constructor:biot.BiotAppDbLocal)
}

inline void BiotAppDbLocal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dbtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BiotAppDbLocal::~BiotAppDbLocal() {
  // @@protoc_insertion_point(destructor:biot.BiotAppDbLocal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BiotAppDbLocal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BiotAppDbLocal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BiotAppDbLocal::Clear() {
// @@protoc_insertion_point(message_clear_start:biot.BiotAppDbLocal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dbtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BiotAppDbLocal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .biot.BiotAppDbType dbtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dbtype(static_cast<::biot::BiotAppDbType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BiotAppDbLocal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:biot.BiotAppDbLocal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .biot.BiotAppDbType dbtype = 1;
  if (this->_internal_dbtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dbtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:biot.BiotAppDbLocal)
  return target;
}

size_t BiotAppDbLocal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:biot.BiotAppDbLocal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .biot.BiotAppDbType dbtype = 1;
  if (this->_internal_dbtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dbtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BiotAppDbLocal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BiotAppDbLocal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BiotAppDbLocal::GetClassData() const { return &_class_data_; }

void BiotAppDbLocal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BiotAppDbLocal *>(to)->MergeFrom(
      static_cast<const BiotAppDbLocal &>(from));
}


void BiotAppDbLocal::MergeFrom(const BiotAppDbLocal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:biot.BiotAppDbLocal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dbtype() != 0) {
    _internal_set_dbtype(from._internal_dbtype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BiotAppDbLocal::CopyFrom(const BiotAppDbLocal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:biot.BiotAppDbLocal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiotAppDbLocal::IsInitialized() const {
  return true;
}

void BiotAppDbLocal::InternalSwap(BiotAppDbLocal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.dbtype_, other->_impl_.dbtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BiotAppDbLocal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_module_5fdb_2eproto_getter, &descriptor_table_module_5fdb_2eproto_once,
      file_level_metadata_module_5fdb_2eproto[0]);
}

// ===================================================================

class BiotAppDb::_Internal {
 public:
  static const ::biot::BiotAppDbLocal& localdb(const BiotAppDb* msg);
};

const ::biot::BiotAppDbLocal&
BiotAppDb::_Internal::localdb(const BiotAppDb* msg) {
  return *msg->_impl_.localdb_;
}
BiotAppDb::BiotAppDb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:biot.BiotAppDb)
}
BiotAppDb::BiotAppDb(const BiotAppDb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.localdb_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_localdb()) {
    _impl_.localdb_ = new ::biot::BiotAppDbLocal(*from._impl_.localdb_);
  }
  // @@protoc_insertion_point(copy_constructor:biot.BiotAppDb)
}

inline void BiotAppDb::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.localdb_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BiotAppDb::~BiotAppDb() {
  // @@protoc_insertion_point(destructor:biot.BiotAppDb)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BiotAppDb::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.localdb_;
}

void BiotAppDb::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BiotAppDb::Clear() {
// @@protoc_insertion_point(message_clear_start:biot.BiotAppDb)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.localdb_ != nullptr) {
    delete _impl_.localdb_;
  }
  _impl_.localdb_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BiotAppDb::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .biot.BiotAppDbLocal localdb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_localdb(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BiotAppDb::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:biot.BiotAppDb)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .biot.BiotAppDbLocal localdb = 1;
  if (this->_internal_has_localdb()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::localdb(this),
        _Internal::localdb(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:biot.BiotAppDb)
  return target;
}

size_t BiotAppDb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:biot.BiotAppDb)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .biot.BiotAppDbLocal localdb = 1;
  if (this->_internal_has_localdb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.localdb_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BiotAppDb::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BiotAppDb::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BiotAppDb::GetClassData() const { return &_class_data_; }

void BiotAppDb::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BiotAppDb *>(to)->MergeFrom(
      static_cast<const BiotAppDb &>(from));
}


void BiotAppDb::MergeFrom(const BiotAppDb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:biot.BiotAppDb)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_localdb()) {
    _internal_mutable_localdb()->::biot::BiotAppDbLocal::MergeFrom(from._internal_localdb());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BiotAppDb::CopyFrom(const BiotAppDb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:biot.BiotAppDb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiotAppDb::IsInitialized() const {
  return true;
}

void BiotAppDb::InternalSwap(BiotAppDb* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.localdb_, other->_impl_.localdb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BiotAppDb::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_module_5fdb_2eproto_getter, &descriptor_table_module_5fdb_2eproto_once,
      file_level_metadata_module_5fdb_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace biot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::biot::BiotAppDbLocal*
Arena::CreateMaybeMessage< ::biot::BiotAppDbLocal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::biot::BiotAppDbLocal >(arena);
}
template<> PROTOBUF_NOINLINE ::biot::BiotAppDb*
Arena::CreateMaybeMessage< ::biot::BiotAppDb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::biot::BiotAppDb >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
