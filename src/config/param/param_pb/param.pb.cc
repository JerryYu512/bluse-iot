// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: param.proto

#include "param.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace biot {
PROTOBUF_CONSTEXPR BiotAppParam::BiotAppParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.exec_uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.basic_)*/nullptr
  , /*decltype(_impl_.system_)*/nullptr
  , /*decltype(_impl_.modules_)*/nullptr
  , /*decltype(_impl_.product_)*/nullptr
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BiotAppParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BiotAppParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BiotAppParamDefaultTypeInternal() {}
  union {
    BiotAppParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BiotAppParamDefaultTypeInternal _BiotAppParam_default_instance_;
}  // namespace biot
static ::_pb::Metadata file_level_metadata_param_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_param_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_param_2eproto = nullptr;

const uint32_t TableStruct_param_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppParam, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppParam, _impl_.exec_uuid_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppParam, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppParam, _impl_.device_name_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppParam, _impl_.device_id_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppParam, _impl_.basic_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppParam, _impl_.system_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppParam, _impl_.modules_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppParam, _impl_.product_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::biot::BiotAppParam)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::biot::_BiotAppParam_default_instance_._instance,
};

const char descriptor_table_protodef_param_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013param.proto\022\004biot\032\021param_basic.proto\032\022"
  "param_system.proto\032\022param_module.proto\032\023"
  "param_product.proto\"\210\002\n\014BiotAppParam\022\014\n\004"
  "uuid\030\001 \001(\t\022\021\n\texec_uuid\030\002 \001(\t\022\017\n\007version"
  "\030\003 \001(\r\022\023\n\013device_name\030\004 \001(\t\022\021\n\tdevice_id"
  "\030\005 \001(\t\022&\n\005basic\030e \001(\0132\027.biot.BiotAppBasi"
  "cParam\022#\n\006system\030f \001(\0132\023.biot.BiotAppSys"
  "tem\022$\n\007modules\030g \001(\0132\023.biot.BiotAppModul"
  "e\022%\n\007product\030h \001(\0132\024.biot.BiotAppProduct"
  "J\004\010\006\020eP\000P\001P\002P\003b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_param_2eproto_deps[4] = {
  &::descriptor_table_param_5fbasic_2eproto,
  &::descriptor_table_param_5fmodule_2eproto,
  &::descriptor_table_param_5fproduct_2eproto,
  &::descriptor_table_param_5fsystem_2eproto,
};
static ::_pbi::once_flag descriptor_table_param_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_param_2eproto = {
    false, false, 382, descriptor_table_protodef_param_2eproto,
    "param.proto",
    &descriptor_table_param_2eproto_once, descriptor_table_param_2eproto_deps, 4, 1,
    schemas, file_default_instances, TableStruct_param_2eproto::offsets,
    file_level_metadata_param_2eproto, file_level_enum_descriptors_param_2eproto,
    file_level_service_descriptors_param_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_param_2eproto_getter() {
  return &descriptor_table_param_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_param_2eproto(&descriptor_table_param_2eproto);
namespace biot {

// ===================================================================

class BiotAppParam::_Internal {
 public:
  static const ::biot::BiotAppBasicParam& basic(const BiotAppParam* msg);
  static const ::biot::BiotAppSystem& system(const BiotAppParam* msg);
  static const ::biot::BiotAppModule& modules(const BiotAppParam* msg);
  static const ::biot::BiotAppProduct& product(const BiotAppParam* msg);
};

const ::biot::BiotAppBasicParam&
BiotAppParam::_Internal::basic(const BiotAppParam* msg) {
  return *msg->_impl_.basic_;
}
const ::biot::BiotAppSystem&
BiotAppParam::_Internal::system(const BiotAppParam* msg) {
  return *msg->_impl_.system_;
}
const ::biot::BiotAppModule&
BiotAppParam::_Internal::modules(const BiotAppParam* msg) {
  return *msg->_impl_.modules_;
}
const ::biot::BiotAppProduct&
BiotAppParam::_Internal::product(const BiotAppParam* msg) {
  return *msg->_impl_.product_;
}
void BiotAppParam::clear_basic() {
  if (GetArenaForAllocation() == nullptr && _impl_.basic_ != nullptr) {
    delete _impl_.basic_;
  }
  _impl_.basic_ = nullptr;
}
void BiotAppParam::clear_system() {
  if (GetArenaForAllocation() == nullptr && _impl_.system_ != nullptr) {
    delete _impl_.system_;
  }
  _impl_.system_ = nullptr;
}
void BiotAppParam::clear_modules() {
  if (GetArenaForAllocation() == nullptr && _impl_.modules_ != nullptr) {
    delete _impl_.modules_;
  }
  _impl_.modules_ = nullptr;
}
void BiotAppParam::clear_product() {
  if (GetArenaForAllocation() == nullptr && _impl_.product_ != nullptr) {
    delete _impl_.product_;
  }
  _impl_.product_ = nullptr;
}
BiotAppParam::BiotAppParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:biot.BiotAppParam)
}
BiotAppParam::BiotAppParam(const BiotAppParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.exec_uuid_){}
    , decltype(_impl_.device_name_){}
    , decltype(_impl_.device_id_){}
    , decltype(_impl_.basic_){nullptr}
    , decltype(_impl_.system_){nullptr}
    , decltype(_impl_.modules_){nullptr}
    , decltype(_impl_.product_){nullptr}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _impl_.uuid_.Set(from._internal_uuid(), 
      GetArenaForAllocation());
  }
  _impl_.exec_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exec_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exec_uuid().empty()) {
    _impl_.exec_uuid_.Set(from._internal_exec_uuid(), 
      GetArenaForAllocation());
  }
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_name().empty()) {
    _impl_.device_name_.Set(from._internal_device_name(), 
      GetArenaForAllocation());
  }
  _impl_.device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_id().empty()) {
    _impl_.device_id_.Set(from._internal_device_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_basic()) {
    _impl_.basic_ = new ::biot::BiotAppBasicParam(*from._impl_.basic_);
  }
  if (from._internal_has_system()) {
    _impl_.system_ = new ::biot::BiotAppSystem(*from._impl_.system_);
  }
  if (from._internal_has_modules()) {
    _impl_.modules_ = new ::biot::BiotAppModule(*from._impl_.modules_);
  }
  if (from._internal_has_product()) {
    _impl_.product_ = new ::biot::BiotAppProduct(*from._impl_.product_);
  }
  _impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:biot.BiotAppParam)
}

inline void BiotAppParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.exec_uuid_){}
    , decltype(_impl_.device_name_){}
    , decltype(_impl_.device_id_){}
    , decltype(_impl_.basic_){nullptr}
    , decltype(_impl_.system_){nullptr}
    , decltype(_impl_.modules_){nullptr}
    , decltype(_impl_.product_){nullptr}
    , decltype(_impl_.version_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exec_uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exec_uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BiotAppParam::~BiotAppParam() {
  // @@protoc_insertion_point(destructor:biot.BiotAppParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BiotAppParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
  _impl_.exec_uuid_.Destroy();
  _impl_.device_name_.Destroy();
  _impl_.device_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.basic_;
  if (this != internal_default_instance()) delete _impl_.system_;
  if (this != internal_default_instance()) delete _impl_.modules_;
  if (this != internal_default_instance()) delete _impl_.product_;
}

void BiotAppParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BiotAppParam::Clear() {
// @@protoc_insertion_point(message_clear_start:biot.BiotAppParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  _impl_.exec_uuid_.ClearToEmpty();
  _impl_.device_name_.ClearToEmpty();
  _impl_.device_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.basic_ != nullptr) {
    delete _impl_.basic_;
  }
  _impl_.basic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.system_ != nullptr) {
    delete _impl_.system_;
  }
  _impl_.system_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.modules_ != nullptr) {
    delete _impl_.modules_;
  }
  _impl_.modules_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.product_ != nullptr) {
    delete _impl_.product_;
  }
  _impl_.product_ = nullptr;
  _impl_.version_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BiotAppParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "biot.BiotAppParam.uuid"));
        } else
          goto handle_unusual;
        continue;
      // string exec_uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_exec_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "biot.BiotAppParam.exec_uuid"));
        } else
          goto handle_unusual;
        continue;
      // uint32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_device_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "biot.BiotAppParam.device_name"));
        } else
          goto handle_unusual;
        continue;
      // string device_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_device_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "biot.BiotAppParam.device_id"));
        } else
          goto handle_unusual;
        continue;
      // .biot.BiotAppBasicParam basic = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_basic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .biot.BiotAppSystem system = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_system(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .biot.BiotAppModule modules = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_modules(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .biot.BiotAppProduct product = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_product(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BiotAppParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:biot.BiotAppParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "biot.BiotAppParam.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // string exec_uuid = 2;
  if (!this->_internal_exec_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exec_uuid().data(), static_cast<int>(this->_internal_exec_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "biot.BiotAppParam.exec_uuid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exec_uuid(), target);
  }

  // uint32 version = 3;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version(), target);
  }

  // string device_name = 4;
  if (!this->_internal_device_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "biot.BiotAppParam.device_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_device_name(), target);
  }

  // string device_id = 5;
  if (!this->_internal_device_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "biot.BiotAppParam.device_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_device_id(), target);
  }

  // .biot.BiotAppBasicParam basic = 101;
  if (this->_internal_has_basic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(101, _Internal::basic(this),
        _Internal::basic(this).GetCachedSize(), target, stream);
  }

  // .biot.BiotAppSystem system = 102;
  if (this->_internal_has_system()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(102, _Internal::system(this),
        _Internal::system(this).GetCachedSize(), target, stream);
  }

  // .biot.BiotAppModule modules = 103;
  if (this->_internal_has_modules()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(103, _Internal::modules(this),
        _Internal::modules(this).GetCachedSize(), target, stream);
  }

  // .biot.BiotAppProduct product = 104;
  if (this->_internal_has_product()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(104, _Internal::product(this),
        _Internal::product(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:biot.BiotAppParam)
  return target;
}

size_t BiotAppParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:biot.BiotAppParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string exec_uuid = 2;
  if (!this->_internal_exec_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exec_uuid());
  }

  // string device_name = 4;
  if (!this->_internal_device_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_name());
  }

  // string device_id = 5;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // .biot.BiotAppBasicParam basic = 101;
  if (this->_internal_has_basic()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.basic_);
  }

  // .biot.BiotAppSystem system = 102;
  if (this->_internal_has_system()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.system_);
  }

  // .biot.BiotAppModule modules = 103;
  if (this->_internal_has_modules()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.modules_);
  }

  // .biot.BiotAppProduct product = 104;
  if (this->_internal_has_product()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.product_);
  }

  // uint32 version = 3;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BiotAppParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BiotAppParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BiotAppParam::GetClassData() const { return &_class_data_; }

void BiotAppParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BiotAppParam *>(to)->MergeFrom(
      static_cast<const BiotAppParam &>(from));
}


void BiotAppParam::MergeFrom(const BiotAppParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:biot.BiotAppParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (!from._internal_exec_uuid().empty()) {
    _internal_set_exec_uuid(from._internal_exec_uuid());
  }
  if (!from._internal_device_name().empty()) {
    _internal_set_device_name(from._internal_device_name());
  }
  if (!from._internal_device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from._internal_has_basic()) {
    _internal_mutable_basic()->::biot::BiotAppBasicParam::MergeFrom(from._internal_basic());
  }
  if (from._internal_has_system()) {
    _internal_mutable_system()->::biot::BiotAppSystem::MergeFrom(from._internal_system());
  }
  if (from._internal_has_modules()) {
    _internal_mutable_modules()->::biot::BiotAppModule::MergeFrom(from._internal_modules());
  }
  if (from._internal_has_product()) {
    _internal_mutable_product()->::biot::BiotAppProduct::MergeFrom(from._internal_product());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BiotAppParam::CopyFrom(const BiotAppParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:biot.BiotAppParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiotAppParam::IsInitialized() const {
  return true;
}

void BiotAppParam::InternalSwap(BiotAppParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exec_uuid_, lhs_arena,
      &other->_impl_.exec_uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_name_, lhs_arena,
      &other->_impl_.device_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_id_, lhs_arena,
      &other->_impl_.device_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BiotAppParam, _impl_.version_)
      + sizeof(BiotAppParam::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(BiotAppParam, _impl_.basic_)>(
          reinterpret_cast<char*>(&_impl_.basic_),
          reinterpret_cast<char*>(&other->_impl_.basic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BiotAppParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_param_2eproto_getter, &descriptor_table_param_2eproto_once,
      file_level_metadata_param_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace biot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::biot::BiotAppParam*
Arena::CreateMaybeMessage< ::biot::BiotAppParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::biot::BiotAppParam >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
