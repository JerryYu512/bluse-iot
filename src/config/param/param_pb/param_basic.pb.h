// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: param_basic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_param_5fbasic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_param_5fbasic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "enums/e_basic.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_param_5fbasic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_param_5fbasic_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_param_5fbasic_2eproto;
namespace biot {
class BiotAppAccessUser;
struct BiotAppAccessUserDefaultTypeInternal;
extern BiotAppAccessUserDefaultTypeInternal _BiotAppAccessUser_default_instance_;
class BiotAppBasicParam;
struct BiotAppBasicParamDefaultTypeInternal;
extern BiotAppBasicParamDefaultTypeInternal _BiotAppBasicParam_default_instance_;
class BiotAppUsers;
struct BiotAppUsersDefaultTypeInternal;
extern BiotAppUsersDefaultTypeInternal _BiotAppUsers_default_instance_;
}  // namespace biot
PROTOBUF_NAMESPACE_OPEN
template<> ::biot::BiotAppAccessUser* Arena::CreateMaybeMessage<::biot::BiotAppAccessUser>(Arena*);
template<> ::biot::BiotAppBasicParam* Arena::CreateMaybeMessage<::biot::BiotAppBasicParam>(Arena*);
template<> ::biot::BiotAppUsers* Arena::CreateMaybeMessage<::biot::BiotAppUsers>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace biot {

// ===================================================================

class BiotAppAccessUser final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:biot.BiotAppAccessUser) */ {
 public:
  inline BiotAppAccessUser() : BiotAppAccessUser(nullptr) {}
  ~BiotAppAccessUser() override;
  explicit PROTOBUF_CONSTEXPR BiotAppAccessUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BiotAppAccessUser(const BiotAppAccessUser& from);
  BiotAppAccessUser(BiotAppAccessUser&& from) noexcept
    : BiotAppAccessUser() {
    *this = ::std::move(from);
  }

  inline BiotAppAccessUser& operator=(const BiotAppAccessUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiotAppAccessUser& operator=(BiotAppAccessUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BiotAppAccessUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const BiotAppAccessUser* internal_default_instance() {
    return reinterpret_cast<const BiotAppAccessUser*>(
               &_BiotAppAccessUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BiotAppAccessUser& a, BiotAppAccessUser& b) {
    a.Swap(&b);
  }
  inline void Swap(BiotAppAccessUser* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BiotAppAccessUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BiotAppAccessUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BiotAppAccessUser>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BiotAppAccessUser& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BiotAppAccessUser& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiotAppAccessUser* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "biot.BiotAppAccessUser";
  }
  protected:
  explicit BiotAppAccessUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPasswdFieldNumber = 2,
    kPermissionFieldNumber = 4,
    kEmailFieldNumber = 6,
    kPhoneFieldNumber = 7,
    kGithubFieldNumber = 8,
    kExpiredFieldNumber = 3,
    kAllowlistFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string passwd = 2;
  void clear_passwd();
  const std::string& passwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_passwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_passwd();
  PROTOBUF_NODISCARD std::string* release_passwd();
  void set_allocated_passwd(std::string* passwd);
  private:
  const std::string& _internal_passwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_passwd(const std::string& value);
  std::string* _internal_mutable_passwd();
  public:

  // string permission = 4;
  void clear_permission();
  const std::string& permission() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_permission(ArgT0&& arg0, ArgT... args);
  std::string* mutable_permission();
  PROTOBUF_NODISCARD std::string* release_permission();
  void set_allocated_permission(std::string* permission);
  private:
  const std::string& _internal_permission() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_permission(const std::string& value);
  std::string* _internal_mutable_permission();
  public:

  // string email = 6;
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string phone = 7;
  void clear_phone();
  const std::string& phone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phone();
  PROTOBUF_NODISCARD std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // string github = 8;
  void clear_github();
  const std::string& github() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_github(ArgT0&& arg0, ArgT... args);
  std::string* mutable_github();
  PROTOBUF_NODISCARD std::string* release_github();
  void set_allocated_github(std::string* github);
  private:
  const std::string& _internal_github() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_github(const std::string& value);
  std::string* _internal_mutable_github();
  public:

  // uint64 expired = 3;
  void clear_expired();
  uint64_t expired() const;
  void set_expired(uint64_t value);
  private:
  uint64_t _internal_expired() const;
  void _internal_set_expired(uint64_t value);
  public:

  // bool allowlist = 5;
  void clear_allowlist();
  bool allowlist() const;
  void set_allowlist(bool value);
  private:
  bool _internal_allowlist() const;
  void _internal_set_allowlist(bool value);
  public:

  // @@protoc_insertion_point(class_scope:biot.BiotAppAccessUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr permission_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr github_;
    uint64_t expired_;
    bool allowlist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_param_5fbasic_2eproto;
};
// -------------------------------------------------------------------

class BiotAppUsers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:biot.BiotAppUsers) */ {
 public:
  inline BiotAppUsers() : BiotAppUsers(nullptr) {}
  ~BiotAppUsers() override;
  explicit PROTOBUF_CONSTEXPR BiotAppUsers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BiotAppUsers(const BiotAppUsers& from);
  BiotAppUsers(BiotAppUsers&& from) noexcept
    : BiotAppUsers() {
    *this = ::std::move(from);
  }

  inline BiotAppUsers& operator=(const BiotAppUsers& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiotAppUsers& operator=(BiotAppUsers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BiotAppUsers& default_instance() {
    return *internal_default_instance();
  }
  static inline const BiotAppUsers* internal_default_instance() {
    return reinterpret_cast<const BiotAppUsers*>(
               &_BiotAppUsers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BiotAppUsers& a, BiotAppUsers& b) {
    a.Swap(&b);
  }
  inline void Swap(BiotAppUsers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BiotAppUsers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BiotAppUsers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BiotAppUsers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BiotAppUsers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BiotAppUsers& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiotAppUsers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "biot.BiotAppUsers";
  }
  protected:
  explicit BiotAppUsers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessUsersFieldNumber = 1,
  };
  // repeated .biot.BiotAppAccessUser access_users = 1;
  int access_users_size() const;
  private:
  int _internal_access_users_size() const;
  public:
  void clear_access_users();
  ::biot::BiotAppAccessUser* mutable_access_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::biot::BiotAppAccessUser >*
      mutable_access_users();
  private:
  const ::biot::BiotAppAccessUser& _internal_access_users(int index) const;
  ::biot::BiotAppAccessUser* _internal_add_access_users();
  public:
  const ::biot::BiotAppAccessUser& access_users(int index) const;
  ::biot::BiotAppAccessUser* add_access_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::biot::BiotAppAccessUser >&
      access_users() const;

  // @@protoc_insertion_point(class_scope:biot.BiotAppUsers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::biot::BiotAppAccessUser > access_users_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_param_5fbasic_2eproto;
};
// -------------------------------------------------------------------

class BiotAppBasicParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:biot.BiotAppBasicParam) */ {
 public:
  inline BiotAppBasicParam() : BiotAppBasicParam(nullptr) {}
  ~BiotAppBasicParam() override;
  explicit PROTOBUF_CONSTEXPR BiotAppBasicParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BiotAppBasicParam(const BiotAppBasicParam& from);
  BiotAppBasicParam(BiotAppBasicParam&& from) noexcept
    : BiotAppBasicParam() {
    *this = ::std::move(from);
  }

  inline BiotAppBasicParam& operator=(const BiotAppBasicParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiotAppBasicParam& operator=(BiotAppBasicParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BiotAppBasicParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const BiotAppBasicParam* internal_default_instance() {
    return reinterpret_cast<const BiotAppBasicParam*>(
               &_BiotAppBasicParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BiotAppBasicParam& a, BiotAppBasicParam& b) {
    a.Swap(&b);
  }
  inline void Swap(BiotAppBasicParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BiotAppBasicParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BiotAppBasicParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BiotAppBasicParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BiotAppBasicParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BiotAppBasicParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiotAppBasicParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "biot.BiotAppBasicParam";
  }
  protected:
  explicit BiotAppBasicParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 2,
    kAppmodeFieldNumber = 1,
  };
  // .biot.BiotAppUsers user = 2;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::biot::BiotAppUsers& user() const;
  PROTOBUF_NODISCARD ::biot::BiotAppUsers* release_user();
  ::biot::BiotAppUsers* mutable_user();
  void set_allocated_user(::biot::BiotAppUsers* user);
  private:
  const ::biot::BiotAppUsers& _internal_user() const;
  ::biot::BiotAppUsers* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::biot::BiotAppUsers* user);
  ::biot::BiotAppUsers* unsafe_arena_release_user();

  // .biot.EBiotAppMode appmode = 1;
  void clear_appmode();
  ::biot::EBiotAppMode appmode() const;
  void set_appmode(::biot::EBiotAppMode value);
  private:
  ::biot::EBiotAppMode _internal_appmode() const;
  void _internal_set_appmode(::biot::EBiotAppMode value);
  public:

  // @@protoc_insertion_point(class_scope:biot.BiotAppBasicParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::biot::BiotAppUsers* user_;
    int appmode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_param_5fbasic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BiotAppAccessUser

// string name = 1;
inline void BiotAppAccessUser::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& BiotAppAccessUser::name() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppAccessUser.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiotAppAccessUser::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:biot.BiotAppAccessUser.name)
}
inline std::string* BiotAppAccessUser::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppAccessUser.name)
  return _s;
}
inline const std::string& BiotAppAccessUser::_internal_name() const {
  return _impl_.name_.Get();
}
inline void BiotAppAccessUser::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* BiotAppAccessUser::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* BiotAppAccessUser::release_name() {
  // @@protoc_insertion_point(field_release:biot.BiotAppAccessUser.name)
  return _impl_.name_.Release();
}
inline void BiotAppAccessUser::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppAccessUser.name)
}

// string passwd = 2;
inline void BiotAppAccessUser::clear_passwd() {
  _impl_.passwd_.ClearToEmpty();
}
inline const std::string& BiotAppAccessUser::passwd() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppAccessUser.passwd)
  return _internal_passwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiotAppAccessUser::set_passwd(ArgT0&& arg0, ArgT... args) {
 
 _impl_.passwd_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:biot.BiotAppAccessUser.passwd)
}
inline std::string* BiotAppAccessUser::mutable_passwd() {
  std::string* _s = _internal_mutable_passwd();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppAccessUser.passwd)
  return _s;
}
inline const std::string& BiotAppAccessUser::_internal_passwd() const {
  return _impl_.passwd_.Get();
}
inline void BiotAppAccessUser::_internal_set_passwd(const std::string& value) {
  
  _impl_.passwd_.Set(value, GetArenaForAllocation());
}
inline std::string* BiotAppAccessUser::_internal_mutable_passwd() {
  
  return _impl_.passwd_.Mutable(GetArenaForAllocation());
}
inline std::string* BiotAppAccessUser::release_passwd() {
  // @@protoc_insertion_point(field_release:biot.BiotAppAccessUser.passwd)
  return _impl_.passwd_.Release();
}
inline void BiotAppAccessUser::set_allocated_passwd(std::string* passwd) {
  if (passwd != nullptr) {
    
  } else {
    
  }
  _impl_.passwd_.SetAllocated(passwd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.passwd_.IsDefault()) {
    _impl_.passwd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppAccessUser.passwd)
}

// uint64 expired = 3;
inline void BiotAppAccessUser::clear_expired() {
  _impl_.expired_ = uint64_t{0u};
}
inline uint64_t BiotAppAccessUser::_internal_expired() const {
  return _impl_.expired_;
}
inline uint64_t BiotAppAccessUser::expired() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppAccessUser.expired)
  return _internal_expired();
}
inline void BiotAppAccessUser::_internal_set_expired(uint64_t value) {
  
  _impl_.expired_ = value;
}
inline void BiotAppAccessUser::set_expired(uint64_t value) {
  _internal_set_expired(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppAccessUser.expired)
}

// string permission = 4;
inline void BiotAppAccessUser::clear_permission() {
  _impl_.permission_.ClearToEmpty();
}
inline const std::string& BiotAppAccessUser::permission() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppAccessUser.permission)
  return _internal_permission();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiotAppAccessUser::set_permission(ArgT0&& arg0, ArgT... args) {
 
 _impl_.permission_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:biot.BiotAppAccessUser.permission)
}
inline std::string* BiotAppAccessUser::mutable_permission() {
  std::string* _s = _internal_mutable_permission();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppAccessUser.permission)
  return _s;
}
inline const std::string& BiotAppAccessUser::_internal_permission() const {
  return _impl_.permission_.Get();
}
inline void BiotAppAccessUser::_internal_set_permission(const std::string& value) {
  
  _impl_.permission_.Set(value, GetArenaForAllocation());
}
inline std::string* BiotAppAccessUser::_internal_mutable_permission() {
  
  return _impl_.permission_.Mutable(GetArenaForAllocation());
}
inline std::string* BiotAppAccessUser::release_permission() {
  // @@protoc_insertion_point(field_release:biot.BiotAppAccessUser.permission)
  return _impl_.permission_.Release();
}
inline void BiotAppAccessUser::set_allocated_permission(std::string* permission) {
  if (permission != nullptr) {
    
  } else {
    
  }
  _impl_.permission_.SetAllocated(permission, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.permission_.IsDefault()) {
    _impl_.permission_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppAccessUser.permission)
}

// bool allowlist = 5;
inline void BiotAppAccessUser::clear_allowlist() {
  _impl_.allowlist_ = false;
}
inline bool BiotAppAccessUser::_internal_allowlist() const {
  return _impl_.allowlist_;
}
inline bool BiotAppAccessUser::allowlist() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppAccessUser.allowlist)
  return _internal_allowlist();
}
inline void BiotAppAccessUser::_internal_set_allowlist(bool value) {
  
  _impl_.allowlist_ = value;
}
inline void BiotAppAccessUser::set_allowlist(bool value) {
  _internal_set_allowlist(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppAccessUser.allowlist)
}

// string email = 6;
inline void BiotAppAccessUser::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& BiotAppAccessUser::email() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppAccessUser.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiotAppAccessUser::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:biot.BiotAppAccessUser.email)
}
inline std::string* BiotAppAccessUser::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppAccessUser.email)
  return _s;
}
inline const std::string& BiotAppAccessUser::_internal_email() const {
  return _impl_.email_.Get();
}
inline void BiotAppAccessUser::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* BiotAppAccessUser::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* BiotAppAccessUser::release_email() {
  // @@protoc_insertion_point(field_release:biot.BiotAppAccessUser.email)
  return _impl_.email_.Release();
}
inline void BiotAppAccessUser::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppAccessUser.email)
}

// string phone = 7;
inline void BiotAppAccessUser::clear_phone() {
  _impl_.phone_.ClearToEmpty();
}
inline const std::string& BiotAppAccessUser::phone() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppAccessUser.phone)
  return _internal_phone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiotAppAccessUser::set_phone(ArgT0&& arg0, ArgT... args) {
 
 _impl_.phone_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:biot.BiotAppAccessUser.phone)
}
inline std::string* BiotAppAccessUser::mutable_phone() {
  std::string* _s = _internal_mutable_phone();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppAccessUser.phone)
  return _s;
}
inline const std::string& BiotAppAccessUser::_internal_phone() const {
  return _impl_.phone_.Get();
}
inline void BiotAppAccessUser::_internal_set_phone(const std::string& value) {
  
  _impl_.phone_.Set(value, GetArenaForAllocation());
}
inline std::string* BiotAppAccessUser::_internal_mutable_phone() {
  
  return _impl_.phone_.Mutable(GetArenaForAllocation());
}
inline std::string* BiotAppAccessUser::release_phone() {
  // @@protoc_insertion_point(field_release:biot.BiotAppAccessUser.phone)
  return _impl_.phone_.Release();
}
inline void BiotAppAccessUser::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  _impl_.phone_.SetAllocated(phone, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.phone_.IsDefault()) {
    _impl_.phone_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppAccessUser.phone)
}

// string github = 8;
inline void BiotAppAccessUser::clear_github() {
  _impl_.github_.ClearToEmpty();
}
inline const std::string& BiotAppAccessUser::github() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppAccessUser.github)
  return _internal_github();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiotAppAccessUser::set_github(ArgT0&& arg0, ArgT... args) {
 
 _impl_.github_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:biot.BiotAppAccessUser.github)
}
inline std::string* BiotAppAccessUser::mutable_github() {
  std::string* _s = _internal_mutable_github();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppAccessUser.github)
  return _s;
}
inline const std::string& BiotAppAccessUser::_internal_github() const {
  return _impl_.github_.Get();
}
inline void BiotAppAccessUser::_internal_set_github(const std::string& value) {
  
  _impl_.github_.Set(value, GetArenaForAllocation());
}
inline std::string* BiotAppAccessUser::_internal_mutable_github() {
  
  return _impl_.github_.Mutable(GetArenaForAllocation());
}
inline std::string* BiotAppAccessUser::release_github() {
  // @@protoc_insertion_point(field_release:biot.BiotAppAccessUser.github)
  return _impl_.github_.Release();
}
inline void BiotAppAccessUser::set_allocated_github(std::string* github) {
  if (github != nullptr) {
    
  } else {
    
  }
  _impl_.github_.SetAllocated(github, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.github_.IsDefault()) {
    _impl_.github_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppAccessUser.github)
}

// -------------------------------------------------------------------

// BiotAppUsers

// repeated .biot.BiotAppAccessUser access_users = 1;
inline int BiotAppUsers::_internal_access_users_size() const {
  return _impl_.access_users_.size();
}
inline int BiotAppUsers::access_users_size() const {
  return _internal_access_users_size();
}
inline void BiotAppUsers::clear_access_users() {
  _impl_.access_users_.Clear();
}
inline ::biot::BiotAppAccessUser* BiotAppUsers::mutable_access_users(int index) {
  // @@protoc_insertion_point(field_mutable:biot.BiotAppUsers.access_users)
  return _impl_.access_users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::biot::BiotAppAccessUser >*
BiotAppUsers::mutable_access_users() {
  // @@protoc_insertion_point(field_mutable_list:biot.BiotAppUsers.access_users)
  return &_impl_.access_users_;
}
inline const ::biot::BiotAppAccessUser& BiotAppUsers::_internal_access_users(int index) const {
  return _impl_.access_users_.Get(index);
}
inline const ::biot::BiotAppAccessUser& BiotAppUsers::access_users(int index) const {
  // @@protoc_insertion_point(field_get:biot.BiotAppUsers.access_users)
  return _internal_access_users(index);
}
inline ::biot::BiotAppAccessUser* BiotAppUsers::_internal_add_access_users() {
  return _impl_.access_users_.Add();
}
inline ::biot::BiotAppAccessUser* BiotAppUsers::add_access_users() {
  ::biot::BiotAppAccessUser* _add = _internal_add_access_users();
  // @@protoc_insertion_point(field_add:biot.BiotAppUsers.access_users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::biot::BiotAppAccessUser >&
BiotAppUsers::access_users() const {
  // @@protoc_insertion_point(field_list:biot.BiotAppUsers.access_users)
  return _impl_.access_users_;
}

// -------------------------------------------------------------------

// BiotAppBasicParam

// .biot.EBiotAppMode appmode = 1;
inline void BiotAppBasicParam::clear_appmode() {
  _impl_.appmode_ = 0;
}
inline ::biot::EBiotAppMode BiotAppBasicParam::_internal_appmode() const {
  return static_cast< ::biot::EBiotAppMode >(_impl_.appmode_);
}
inline ::biot::EBiotAppMode BiotAppBasicParam::appmode() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppBasicParam.appmode)
  return _internal_appmode();
}
inline void BiotAppBasicParam::_internal_set_appmode(::biot::EBiotAppMode value) {
  
  _impl_.appmode_ = value;
}
inline void BiotAppBasicParam::set_appmode(::biot::EBiotAppMode value) {
  _internal_set_appmode(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppBasicParam.appmode)
}

// .biot.BiotAppUsers user = 2;
inline bool BiotAppBasicParam::_internal_has_user() const {
  return this != internal_default_instance() && _impl_.user_ != nullptr;
}
inline bool BiotAppBasicParam::has_user() const {
  return _internal_has_user();
}
inline void BiotAppBasicParam::clear_user() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
}
inline const ::biot::BiotAppUsers& BiotAppBasicParam::_internal_user() const {
  const ::biot::BiotAppUsers* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::biot::BiotAppUsers&>(
      ::biot::_BiotAppUsers_default_instance_);
}
inline const ::biot::BiotAppUsers& BiotAppBasicParam::user() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppBasicParam.user)
  return _internal_user();
}
inline void BiotAppBasicParam::unsafe_arena_set_allocated_user(
    ::biot::BiotAppUsers* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:biot.BiotAppBasicParam.user)
}
inline ::biot::BiotAppUsers* BiotAppBasicParam::release_user() {
  
  ::biot::BiotAppUsers* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::biot::BiotAppUsers* BiotAppBasicParam::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:biot.BiotAppBasicParam.user)
  
  ::biot::BiotAppUsers* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::biot::BiotAppUsers* BiotAppBasicParam::_internal_mutable_user() {
  
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::biot::BiotAppUsers>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::biot::BiotAppUsers* BiotAppBasicParam::mutable_user() {
  ::biot::BiotAppUsers* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppBasicParam.user)
  return _msg;
}
inline void BiotAppBasicParam::set_allocated_user(::biot::BiotAppUsers* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppBasicParam.user)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace biot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_param_5fbasic_2eproto
