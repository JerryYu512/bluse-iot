// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums/e_network.proto

#include "enums/e_network.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace biot {
}  // namespace biot
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_enums_2fe_5fnetwork_2eproto[12];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_enums_2fe_5fnetwork_2eproto = nullptr;
const uint32_t TableStruct_enums_2fe_5fnetwork_2eproto::offsets[1] = {};
static constexpr ::_pbi::MigrationSchema* schemas = nullptr;
static constexpr ::_pb::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_enums_2fe_5fnetwork_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025enums/e_network.proto\022\004biot*\223\001\n\nNetLan"
  "Type\022\025\n\021LAN_WORK_10M_HALF\020\000\022\025\n\021LAN_WORK_"
  "10M_FULL\020\001\022\026\n\022LAN_WORK_100M_HALF\020\002\022\026\n\022LA"
  "N_WORK_100M_FULL\020\003\022\021\n\rLAN_WORK_AUTO\020\004\022\024\n"
  "\020LAN_WORK_1G_FULL\020\005*8\n\tNetIfRate\022\024\n\020NET_"
  "IF_RATE_100M\020\000\022\025\n\021NET_IF_RATE_1000M\020\001*2\n"
  "\nNetCfgType\022\022\n\016NET_CFG_MANUAL\020\000\022\020\n\014NET_C"
  "FG_AUTO\020\001*;\n\016WireLessIfMode\022\024\n\020WIRELESS_"
  "IF_AUTO\020\000\022\023\n\017WIRELESS_IF_LAN\020\001*G\n\020WireLe"
  "ssWorkMode\022\031\n\025WIRELESS_WORK_MANAGED\020\000\022\030\n"
  "\024WIRELESS_WORK_AD_HOC\020\001*\224\001\n\017WireLessSecM"
  "ode\022\025\n\021WIRELESS_SEC_NONE\020\000\022\024\n\020WIRELESS_S"
  "EC_WEP\020\001\022\030\n\024WIRELESS_SEC_WPA_PSK\020\002\022\037\n\033WI"
  "RELESS_SEC_WPA_ENTERPRISE\020\003\022\031\n\025WIRELESS_"
  "SEC_WPA2_PSK\020\004*L\n\023WireLessWepAuthType\022\031\n"
  "\025WIRELESS_WEPAUTH_OPEN\020\000\022\032\n\026WIRELESS_WEP"
  "AUTH_SHARE\020\001*f\n\021WireLessWepKeyLen\022\031\n\025WIR"
  "ELESS_WEPKEY_LEN64\020\000\022\032\n\026WIRELESS_WEPKEY_"
  "LEN128\020\001\022\032\n\026WIRELESS_WEPKEY_LEN152\020\002*H\n\022"
  "WireLessWepKeyType\022\027\n\023WIRELESS_WEPKEY_HE"
  "X\020\000\022\031\n\025WIRELESS_WEPKEY_ASCII\020\001*U\n\026WireLe"
  "ssWpaEncryptType\022\034\n\030WIRELESS_WPA_ENCRYPT"
  "_AES\020\000\022\035\n\031WIRELESS_WPA_ENCRYPT_TKIP\020\001*b\n"
  "\025BiotAppModuleProtocol\022\026\n\022MODULE_PROTOC_"
  "MQTT\020\000\022\025\n\021MODULE_PROTOC_NNG\020\001\022\032\n\026MODULE_"
  "PROTOC_PROTOBUF\020\002*\225\001\n\024BiotAppModulePaylo"
  "ad\022\026\n\022MODULE_PAYLOAD_RAW\020\000\022\027\n\023MODULE_PAY"
  "LOAD_HTTP\020\001\022\027\n\023MODULE_PAYLOAD_JSON\020\002\022\026\n\022"
  "MODULE_PAYLOAD_XML\020\003\022\033\n\027MODULE_PAYLOAD_P"
  "ROTOBUF\020\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_enums_2fe_5fnetwork_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_enums_2fe_5fnetwork_2eproto = {
    false, false, 1177, descriptor_table_protodef_enums_2fe_5fnetwork_2eproto,
    "enums/e_network.proto",
    &descriptor_table_enums_2fe_5fnetwork_2eproto_once, nullptr, 0, 0,
    schemas, file_default_instances, TableStruct_enums_2fe_5fnetwork_2eproto::offsets,
    nullptr, file_level_enum_descriptors_enums_2fe_5fnetwork_2eproto,
    file_level_service_descriptors_enums_2fe_5fnetwork_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_enums_2fe_5fnetwork_2eproto_getter() {
  return &descriptor_table_enums_2fe_5fnetwork_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_enums_2fe_5fnetwork_2eproto(&descriptor_table_enums_2fe_5fnetwork_2eproto);
namespace biot {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetLanType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2fe_5fnetwork_2eproto);
  return file_level_enum_descriptors_enums_2fe_5fnetwork_2eproto[0];
}
bool NetLanType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetIfRate_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2fe_5fnetwork_2eproto);
  return file_level_enum_descriptors_enums_2fe_5fnetwork_2eproto[1];
}
bool NetIfRate_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetCfgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2fe_5fnetwork_2eproto);
  return file_level_enum_descriptors_enums_2fe_5fnetwork_2eproto[2];
}
bool NetCfgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WireLessIfMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2fe_5fnetwork_2eproto);
  return file_level_enum_descriptors_enums_2fe_5fnetwork_2eproto[3];
}
bool WireLessIfMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WireLessWorkMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2fe_5fnetwork_2eproto);
  return file_level_enum_descriptors_enums_2fe_5fnetwork_2eproto[4];
}
bool WireLessWorkMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WireLessSecMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2fe_5fnetwork_2eproto);
  return file_level_enum_descriptors_enums_2fe_5fnetwork_2eproto[5];
}
bool WireLessSecMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WireLessWepAuthType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2fe_5fnetwork_2eproto);
  return file_level_enum_descriptors_enums_2fe_5fnetwork_2eproto[6];
}
bool WireLessWepAuthType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WireLessWepKeyLen_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2fe_5fnetwork_2eproto);
  return file_level_enum_descriptors_enums_2fe_5fnetwork_2eproto[7];
}
bool WireLessWepKeyLen_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WireLessWepKeyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2fe_5fnetwork_2eproto);
  return file_level_enum_descriptors_enums_2fe_5fnetwork_2eproto[8];
}
bool WireLessWepKeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WireLessWpaEncryptType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2fe_5fnetwork_2eproto);
  return file_level_enum_descriptors_enums_2fe_5fnetwork_2eproto[9];
}
bool WireLessWpaEncryptType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BiotAppModuleProtocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2fe_5fnetwork_2eproto);
  return file_level_enum_descriptors_enums_2fe_5fnetwork_2eproto[10];
}
bool BiotAppModuleProtocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BiotAppModulePayload_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_enums_2fe_5fnetwork_2eproto);
  return file_level_enum_descriptors_enums_2fe_5fnetwork_2eproto[11];
}
bool BiotAppModulePayload_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace biot
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
