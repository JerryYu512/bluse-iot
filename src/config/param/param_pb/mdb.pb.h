// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mdb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mdb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mdb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mdb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mdb_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mdb_2eproto;
namespace biot {
class BiotAppDb;
struct BiotAppDbDefaultTypeInternal;
extern BiotAppDbDefaultTypeInternal _BiotAppDb_default_instance_;
class BiotAppDbLocal;
struct BiotAppDbLocalDefaultTypeInternal;
extern BiotAppDbLocalDefaultTypeInternal _BiotAppDbLocal_default_instance_;
}  // namespace biot
PROTOBUF_NAMESPACE_OPEN
template<> ::biot::BiotAppDb* Arena::CreateMaybeMessage<::biot::BiotAppDb>(Arena*);
template<> ::biot::BiotAppDbLocal* Arena::CreateMaybeMessage<::biot::BiotAppDbLocal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace biot {

enum BiotAppDbType : int {
  DB_TYPE_SQLITE3 = 0,
  DB_TYPE_MONGODB = 1,
  DB_TYPE_MYSQL = 2,
  DB_TYPE_LEVELDB = 3,
  DB_TYPE_CUSTOM = 4,
  BiotAppDbType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BiotAppDbType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BiotAppDbType_IsValid(int value);
constexpr BiotAppDbType BiotAppDbType_MIN = DB_TYPE_SQLITE3;
constexpr BiotAppDbType BiotAppDbType_MAX = DB_TYPE_CUSTOM;
constexpr int BiotAppDbType_ARRAYSIZE = BiotAppDbType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BiotAppDbType_descriptor();
template<typename T>
inline const std::string& BiotAppDbType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BiotAppDbType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BiotAppDbType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BiotAppDbType_descriptor(), enum_t_value);
}
inline bool BiotAppDbType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BiotAppDbType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BiotAppDbType>(
    BiotAppDbType_descriptor(), name, value);
}
// ===================================================================

class BiotAppDbLocal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:biot.BiotAppDbLocal) */ {
 public:
  inline BiotAppDbLocal() : BiotAppDbLocal(nullptr) {}
  ~BiotAppDbLocal() override;
  explicit PROTOBUF_CONSTEXPR BiotAppDbLocal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BiotAppDbLocal(const BiotAppDbLocal& from);
  BiotAppDbLocal(BiotAppDbLocal&& from) noexcept
    : BiotAppDbLocal() {
    *this = ::std::move(from);
  }

  inline BiotAppDbLocal& operator=(const BiotAppDbLocal& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiotAppDbLocal& operator=(BiotAppDbLocal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BiotAppDbLocal& default_instance() {
    return *internal_default_instance();
  }
  static inline const BiotAppDbLocal* internal_default_instance() {
    return reinterpret_cast<const BiotAppDbLocal*>(
               &_BiotAppDbLocal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BiotAppDbLocal& a, BiotAppDbLocal& b) {
    a.Swap(&b);
  }
  inline void Swap(BiotAppDbLocal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BiotAppDbLocal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BiotAppDbLocal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BiotAppDbLocal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BiotAppDbLocal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BiotAppDbLocal& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiotAppDbLocal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "biot.BiotAppDbLocal";
  }
  protected:
  explicit BiotAppDbLocal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbtypeFieldNumber = 1,
  };
  // .biot.BiotAppDbType dbtype = 1;
  void clear_dbtype();
  ::biot::BiotAppDbType dbtype() const;
  void set_dbtype(::biot::BiotAppDbType value);
  private:
  ::biot::BiotAppDbType _internal_dbtype() const;
  void _internal_set_dbtype(::biot::BiotAppDbType value);
  public:

  // @@protoc_insertion_point(class_scope:biot.BiotAppDbLocal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int dbtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mdb_2eproto;
};
// -------------------------------------------------------------------

class BiotAppDb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:biot.BiotAppDb) */ {
 public:
  inline BiotAppDb() : BiotAppDb(nullptr) {}
  ~BiotAppDb() override;
  explicit PROTOBUF_CONSTEXPR BiotAppDb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BiotAppDb(const BiotAppDb& from);
  BiotAppDb(BiotAppDb&& from) noexcept
    : BiotAppDb() {
    *this = ::std::move(from);
  }

  inline BiotAppDb& operator=(const BiotAppDb& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiotAppDb& operator=(BiotAppDb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BiotAppDb& default_instance() {
    return *internal_default_instance();
  }
  static inline const BiotAppDb* internal_default_instance() {
    return reinterpret_cast<const BiotAppDb*>(
               &_BiotAppDb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BiotAppDb& a, BiotAppDb& b) {
    a.Swap(&b);
  }
  inline void Swap(BiotAppDb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BiotAppDb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BiotAppDb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BiotAppDb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BiotAppDb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BiotAppDb& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiotAppDb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "biot.BiotAppDb";
  }
  protected:
  explicit BiotAppDb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocaldbFieldNumber = 1,
  };
  // .biot.BiotAppDbLocal localdb = 1;
  bool has_localdb() const;
  private:
  bool _internal_has_localdb() const;
  public:
  void clear_localdb();
  const ::biot::BiotAppDbLocal& localdb() const;
  PROTOBUF_NODISCARD ::biot::BiotAppDbLocal* release_localdb();
  ::biot::BiotAppDbLocal* mutable_localdb();
  void set_allocated_localdb(::biot::BiotAppDbLocal* localdb);
  private:
  const ::biot::BiotAppDbLocal& _internal_localdb() const;
  ::biot::BiotAppDbLocal* _internal_mutable_localdb();
  public:
  void unsafe_arena_set_allocated_localdb(
      ::biot::BiotAppDbLocal* localdb);
  ::biot::BiotAppDbLocal* unsafe_arena_release_localdb();

  // @@protoc_insertion_point(class_scope:biot.BiotAppDb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::biot::BiotAppDbLocal* localdb_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mdb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BiotAppDbLocal

// .biot.BiotAppDbType dbtype = 1;
inline void BiotAppDbLocal::clear_dbtype() {
  _impl_.dbtype_ = 0;
}
inline ::biot::BiotAppDbType BiotAppDbLocal::_internal_dbtype() const {
  return static_cast< ::biot::BiotAppDbType >(_impl_.dbtype_);
}
inline ::biot::BiotAppDbType BiotAppDbLocal::dbtype() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppDbLocal.dbtype)
  return _internal_dbtype();
}
inline void BiotAppDbLocal::_internal_set_dbtype(::biot::BiotAppDbType value) {
  
  _impl_.dbtype_ = value;
}
inline void BiotAppDbLocal::set_dbtype(::biot::BiotAppDbType value) {
  _internal_set_dbtype(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppDbLocal.dbtype)
}

// -------------------------------------------------------------------

// BiotAppDb

// .biot.BiotAppDbLocal localdb = 1;
inline bool BiotAppDb::_internal_has_localdb() const {
  return this != internal_default_instance() && _impl_.localdb_ != nullptr;
}
inline bool BiotAppDb::has_localdb() const {
  return _internal_has_localdb();
}
inline void BiotAppDb::clear_localdb() {
  if (GetArenaForAllocation() == nullptr && _impl_.localdb_ != nullptr) {
    delete _impl_.localdb_;
  }
  _impl_.localdb_ = nullptr;
}
inline const ::biot::BiotAppDbLocal& BiotAppDb::_internal_localdb() const {
  const ::biot::BiotAppDbLocal* p = _impl_.localdb_;
  return p != nullptr ? *p : reinterpret_cast<const ::biot::BiotAppDbLocal&>(
      ::biot::_BiotAppDbLocal_default_instance_);
}
inline const ::biot::BiotAppDbLocal& BiotAppDb::localdb() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppDb.localdb)
  return _internal_localdb();
}
inline void BiotAppDb::unsafe_arena_set_allocated_localdb(
    ::biot::BiotAppDbLocal* localdb) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.localdb_);
  }
  _impl_.localdb_ = localdb;
  if (localdb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:biot.BiotAppDb.localdb)
}
inline ::biot::BiotAppDbLocal* BiotAppDb::release_localdb() {
  
  ::biot::BiotAppDbLocal* temp = _impl_.localdb_;
  _impl_.localdb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::biot::BiotAppDbLocal* BiotAppDb::unsafe_arena_release_localdb() {
  // @@protoc_insertion_point(field_release:biot.BiotAppDb.localdb)
  
  ::biot::BiotAppDbLocal* temp = _impl_.localdb_;
  _impl_.localdb_ = nullptr;
  return temp;
}
inline ::biot::BiotAppDbLocal* BiotAppDb::_internal_mutable_localdb() {
  
  if (_impl_.localdb_ == nullptr) {
    auto* p = CreateMaybeMessage<::biot::BiotAppDbLocal>(GetArenaForAllocation());
    _impl_.localdb_ = p;
  }
  return _impl_.localdb_;
}
inline ::biot::BiotAppDbLocal* BiotAppDb::mutable_localdb() {
  ::biot::BiotAppDbLocal* _msg = _internal_mutable_localdb();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppDb.localdb)
  return _msg;
}
inline void BiotAppDb::set_allocated_localdb(::biot::BiotAppDbLocal* localdb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.localdb_;
  }
  if (localdb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(localdb);
    if (message_arena != submessage_arena) {
      localdb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localdb, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.localdb_ = localdb;
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppDb.localdb)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace biot

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::biot::BiotAppDbType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::biot::BiotAppDbType>() {
  return ::biot::BiotAppDbType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mdb_2eproto
