// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module_network.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_module_5fnetwork_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_module_5fnetwork_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "enums/e_network.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_module_5fnetwork_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_module_5fnetwork_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_module_5fnetwork_2eproto;
namespace biot {
class BiotAppCmdApi;
struct BiotAppCmdApiDefaultTypeInternal;
extern BiotAppCmdApiDefaultTypeInternal _BiotAppCmdApi_default_instance_;
class BiotAppLanParam;
struct BiotAppLanParamDefaultTypeInternal;
extern BiotAppLanParamDefaultTypeInternal _BiotAppLanParam_default_instance_;
class BiotAppNetwork;
struct BiotAppNetworkDefaultTypeInternal;
extern BiotAppNetworkDefaultTypeInternal _BiotAppNetwork_default_instance_;
class BiotAppOatppApi;
struct BiotAppOatppApiDefaultTypeInternal;
extern BiotAppOatppApiDefaultTypeInternal _BiotAppOatppApi_default_instance_;
class BiotAppRtsp;
struct BiotAppRtspDefaultTypeInternal;
extern BiotAppRtspDefaultTypeInternal _BiotAppRtsp_default_instance_;
class BiotAppWebServiceParam;
struct BiotAppWebServiceParamDefaultTypeInternal;
extern BiotAppWebServiceParamDefaultTypeInternal _BiotAppWebServiceParam_default_instance_;
}  // namespace biot
PROTOBUF_NAMESPACE_OPEN
template<> ::biot::BiotAppCmdApi* Arena::CreateMaybeMessage<::biot::BiotAppCmdApi>(Arena*);
template<> ::biot::BiotAppLanParam* Arena::CreateMaybeMessage<::biot::BiotAppLanParam>(Arena*);
template<> ::biot::BiotAppNetwork* Arena::CreateMaybeMessage<::biot::BiotAppNetwork>(Arena*);
template<> ::biot::BiotAppOatppApi* Arena::CreateMaybeMessage<::biot::BiotAppOatppApi>(Arena*);
template<> ::biot::BiotAppRtsp* Arena::CreateMaybeMessage<::biot::BiotAppRtsp>(Arena*);
template<> ::biot::BiotAppWebServiceParam* Arena::CreateMaybeMessage<::biot::BiotAppWebServiceParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace biot {

// ===================================================================

class BiotAppLanParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:biot.BiotAppLanParam) */ {
 public:
  inline BiotAppLanParam() : BiotAppLanParam(nullptr) {}
  ~BiotAppLanParam() override;
  explicit PROTOBUF_CONSTEXPR BiotAppLanParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BiotAppLanParam(const BiotAppLanParam& from);
  BiotAppLanParam(BiotAppLanParam&& from) noexcept
    : BiotAppLanParam() {
    *this = ::std::move(from);
  }

  inline BiotAppLanParam& operator=(const BiotAppLanParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiotAppLanParam& operator=(BiotAppLanParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BiotAppLanParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const BiotAppLanParam* internal_default_instance() {
    return reinterpret_cast<const BiotAppLanParam*>(
               &_BiotAppLanParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BiotAppLanParam& a, BiotAppLanParam& b) {
    a.Swap(&b);
  }
  inline void Swap(BiotAppLanParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BiotAppLanParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BiotAppLanParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BiotAppLanParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BiotAppLanParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BiotAppLanParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiotAppLanParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "biot.BiotAppLanParam";
  }
  protected:
  explicit BiotAppLanParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIfNameFieldNumber = 3,
    kMacFieldNumber = 4,
    kIpv4FieldNumber = 5,
    kIpv6FieldNumber = 6,
    kSubmaskFieldNumber = 7,
    kGatewayFieldNumber = 8,
    kDnsFieldNumber = 10,
    kTypeFieldNumber = 1,
    kCfgTypeFieldNumber = 2,
    kMtuFieldNumber = 9,
    kX1FieldNumber = 11,
    kX2FieldNumber = 12,
    kX3FieldNumber = 13,
  };
  // string if_name = 3;
  void clear_if_name();
  const std::string& if_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_if_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_if_name();
  PROTOBUF_NODISCARD std::string* release_if_name();
  void set_allocated_if_name(std::string* if_name);
  private:
  const std::string& _internal_if_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_if_name(const std::string& value);
  std::string* _internal_mutable_if_name();
  public:

  // string mac = 4;
  void clear_mac();
  const std::string& mac() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mac(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mac();
  PROTOBUF_NODISCARD std::string* release_mac();
  void set_allocated_mac(std::string* mac);
  private:
  const std::string& _internal_mac() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac(const std::string& value);
  std::string* _internal_mutable_mac();
  public:

  // string ipv4 = 5;
  void clear_ipv4();
  const std::string& ipv4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv4();
  PROTOBUF_NODISCARD std::string* release_ipv4();
  void set_allocated_ipv4(std::string* ipv4);
  private:
  const std::string& _internal_ipv4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv4(const std::string& value);
  std::string* _internal_mutable_ipv4();
  public:

  // string ipv6 = 6;
  void clear_ipv6();
  const std::string& ipv6() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv6(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv6();
  PROTOBUF_NODISCARD std::string* release_ipv6();
  void set_allocated_ipv6(std::string* ipv6);
  private:
  const std::string& _internal_ipv6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv6(const std::string& value);
  std::string* _internal_mutable_ipv6();
  public:

  // string submask = 7;
  void clear_submask();
  const std::string& submask() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_submask(ArgT0&& arg0, ArgT... args);
  std::string* mutable_submask();
  PROTOBUF_NODISCARD std::string* release_submask();
  void set_allocated_submask(std::string* submask);
  private:
  const std::string& _internal_submask() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_submask(const std::string& value);
  std::string* _internal_mutable_submask();
  public:

  // string gateway = 8;
  void clear_gateway();
  const std::string& gateway() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gateway(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gateway();
  PROTOBUF_NODISCARD std::string* release_gateway();
  void set_allocated_gateway(std::string* gateway);
  private:
  const std::string& _internal_gateway() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gateway(const std::string& value);
  std::string* _internal_mutable_gateway();
  public:

  // string dns = 10;
  void clear_dns();
  const std::string& dns() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dns(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dns();
  PROTOBUF_NODISCARD std::string* release_dns();
  void set_allocated_dns(std::string* dns);
  private:
  const std::string& _internal_dns() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dns(const std::string& value);
  std::string* _internal_mutable_dns();
  public:

  // .biot.NetLanType type = 1;
  void clear_type();
  ::biot::NetLanType type() const;
  void set_type(::biot::NetLanType value);
  private:
  ::biot::NetLanType _internal_type() const;
  void _internal_set_type(::biot::NetLanType value);
  public:

  // .biot.NetCfgType cfg_type = 2;
  void clear_cfg_type();
  ::biot::NetCfgType cfg_type() const;
  void set_cfg_type(::biot::NetCfgType value);
  private:
  ::biot::NetCfgType _internal_cfg_type() const;
  void _internal_set_cfg_type(::biot::NetCfgType value);
  public:

  // uint32 mtu = 9;
  void clear_mtu();
  uint32_t mtu() const;
  void set_mtu(uint32_t value);
  private:
  uint32_t _internal_mtu() const;
  void _internal_set_mtu(uint32_t value);
  public:

  // float x1 = 11;
  void clear_x1();
  float x1() const;
  void set_x1(float value);
  private:
  float _internal_x1() const;
  void _internal_set_x1(float value);
  public:

  // double x2 = 12;
  void clear_x2();
  double x2() const;
  void set_x2(double value);
  private:
  double _internal_x2() const;
  void _internal_set_x2(double value);
  public:

  // bool x3 = 13;
  void clear_x3();
  bool x3() const;
  void set_x3(bool value);
  private:
  bool _internal_x3() const;
  void _internal_set_x3(bool value);
  public:

  // @@protoc_insertion_point(class_scope:biot.BiotAppLanParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr if_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr submask_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gateway_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dns_;
    int type_;
    int cfg_type_;
    uint32_t mtu_;
    float x1_;
    double x2_;
    bool x3_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_module_5fnetwork_2eproto;
};
// -------------------------------------------------------------------

class BiotAppWebServiceParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:biot.BiotAppWebServiceParam) */ {
 public:
  inline BiotAppWebServiceParam() : BiotAppWebServiceParam(nullptr) {}
  ~BiotAppWebServiceParam() override;
  explicit PROTOBUF_CONSTEXPR BiotAppWebServiceParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BiotAppWebServiceParam(const BiotAppWebServiceParam& from);
  BiotAppWebServiceParam(BiotAppWebServiceParam&& from) noexcept
    : BiotAppWebServiceParam() {
    *this = ::std::move(from);
  }

  inline BiotAppWebServiceParam& operator=(const BiotAppWebServiceParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiotAppWebServiceParam& operator=(BiotAppWebServiceParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BiotAppWebServiceParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const BiotAppWebServiceParam* internal_default_instance() {
    return reinterpret_cast<const BiotAppWebServiceParam*>(
               &_BiotAppWebServiceParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BiotAppWebServiceParam& a, BiotAppWebServiceParam& b) {
    a.Swap(&b);
  }
  inline void Swap(BiotAppWebServiceParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BiotAppWebServiceParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BiotAppWebServiceParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BiotAppWebServiceParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BiotAppWebServiceParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BiotAppWebServiceParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiotAppWebServiceParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "biot.BiotAppWebServiceParam";
  }
  protected:
  explicit BiotAppWebServiceParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootFieldNumber = 5,
    kHttpPortFieldNumber = 1,
    kHttpsPortFieldNumber = 2,
    kHttpFieldNumber = 3,
    kHttpsFieldNumber = 4,
    kConnectMaxFieldNumber = 6,
  };
  // string root = 5;
  void clear_root();
  const std::string& root() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_root(ArgT0&& arg0, ArgT... args);
  std::string* mutable_root();
  PROTOBUF_NODISCARD std::string* release_root();
  void set_allocated_root(std::string* root);
  private:
  const std::string& _internal_root() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root(const std::string& value);
  std::string* _internal_mutable_root();
  public:

  // uint32 http_port = 1;
  void clear_http_port();
  uint32_t http_port() const;
  void set_http_port(uint32_t value);
  private:
  uint32_t _internal_http_port() const;
  void _internal_set_http_port(uint32_t value);
  public:

  // uint32 https_port = 2;
  void clear_https_port();
  uint32_t https_port() const;
  void set_https_port(uint32_t value);
  private:
  uint32_t _internal_https_port() const;
  void _internal_set_https_port(uint32_t value);
  public:

  // bool http = 3;
  void clear_http();
  bool http() const;
  void set_http(bool value);
  private:
  bool _internal_http() const;
  void _internal_set_http(bool value);
  public:

  // bool https = 4;
  void clear_https();
  bool https() const;
  void set_https(bool value);
  private:
  bool _internal_https() const;
  void _internal_set_https(bool value);
  public:

  // uint32 connect_max = 6;
  void clear_connect_max();
  uint32_t connect_max() const;
  void set_connect_max(uint32_t value);
  private:
  uint32_t _internal_connect_max() const;
  void _internal_set_connect_max(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:biot.BiotAppWebServiceParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_;
    uint32_t http_port_;
    uint32_t https_port_;
    bool http_;
    bool https_;
    uint32_t connect_max_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_module_5fnetwork_2eproto;
};
// -------------------------------------------------------------------

class BiotAppOatppApi final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:biot.BiotAppOatppApi) */ {
 public:
  inline BiotAppOatppApi() : BiotAppOatppApi(nullptr) {}
  ~BiotAppOatppApi() override;
  explicit PROTOBUF_CONSTEXPR BiotAppOatppApi(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BiotAppOatppApi(const BiotAppOatppApi& from);
  BiotAppOatppApi(BiotAppOatppApi&& from) noexcept
    : BiotAppOatppApi() {
    *this = ::std::move(from);
  }

  inline BiotAppOatppApi& operator=(const BiotAppOatppApi& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiotAppOatppApi& operator=(BiotAppOatppApi&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BiotAppOatppApi& default_instance() {
    return *internal_default_instance();
  }
  static inline const BiotAppOatppApi* internal_default_instance() {
    return reinterpret_cast<const BiotAppOatppApi*>(
               &_BiotAppOatppApi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BiotAppOatppApi& a, BiotAppOatppApi& b) {
    a.Swap(&b);
  }
  inline void Swap(BiotAppOatppApi* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BiotAppOatppApi* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BiotAppOatppApi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BiotAppOatppApi>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BiotAppOatppApi& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BiotAppOatppApi& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiotAppOatppApi* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "biot.BiotAppOatppApi";
  }
  protected:
  explicit BiotAppOatppApi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
    kIpv4FieldNumber = 2,
    kBodyFieldNumber = 3,
  };
  // uint32 port = 1;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // uint32 ipv4 = 2;
  void clear_ipv4();
  uint32_t ipv4() const;
  void set_ipv4(uint32_t value);
  private:
  uint32_t _internal_ipv4() const;
  void _internal_set_ipv4(uint32_t value);
  public:

  // .biot.BiotAppModulePayload body = 3;
  void clear_body();
  ::biot::BiotAppModulePayload body() const;
  void set_body(::biot::BiotAppModulePayload value);
  private:
  ::biot::BiotAppModulePayload _internal_body() const;
  void _internal_set_body(::biot::BiotAppModulePayload value);
  public:

  // @@protoc_insertion_point(class_scope:biot.BiotAppOatppApi)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t port_;
    uint32_t ipv4_;
    int body_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_module_5fnetwork_2eproto;
};
// -------------------------------------------------------------------

class BiotAppCmdApi final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:biot.BiotAppCmdApi) */ {
 public:
  inline BiotAppCmdApi() : BiotAppCmdApi(nullptr) {}
  ~BiotAppCmdApi() override;
  explicit PROTOBUF_CONSTEXPR BiotAppCmdApi(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BiotAppCmdApi(const BiotAppCmdApi& from);
  BiotAppCmdApi(BiotAppCmdApi&& from) noexcept
    : BiotAppCmdApi() {
    *this = ::std::move(from);
  }

  inline BiotAppCmdApi& operator=(const BiotAppCmdApi& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiotAppCmdApi& operator=(BiotAppCmdApi&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BiotAppCmdApi& default_instance() {
    return *internal_default_instance();
  }
  static inline const BiotAppCmdApi* internal_default_instance() {
    return reinterpret_cast<const BiotAppCmdApi*>(
               &_BiotAppCmdApi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BiotAppCmdApi& a, BiotAppCmdApi& b) {
    a.Swap(&b);
  }
  inline void Swap(BiotAppCmdApi* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BiotAppCmdApi* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BiotAppCmdApi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BiotAppCmdApi>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BiotAppCmdApi& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BiotAppCmdApi& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiotAppCmdApi* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "biot.BiotAppCmdApi";
  }
  protected:
  explicit BiotAppCmdApi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
    kIpv4FieldNumber = 2,
    kTransFieldNumber = 3,
    kBodyFieldNumber = 4,
  };
  // uint32 port = 1;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // uint32 ipv4 = 2;
  void clear_ipv4();
  uint32_t ipv4() const;
  void set_ipv4(uint32_t value);
  private:
  uint32_t _internal_ipv4() const;
  void _internal_set_ipv4(uint32_t value);
  public:

  // .biot.BiotAppModuleProtocol trans = 3;
  void clear_trans();
  ::biot::BiotAppModuleProtocol trans() const;
  void set_trans(::biot::BiotAppModuleProtocol value);
  private:
  ::biot::BiotAppModuleProtocol _internal_trans() const;
  void _internal_set_trans(::biot::BiotAppModuleProtocol value);
  public:

  // .biot.BiotAppModulePayload body = 4;
  void clear_body();
  ::biot::BiotAppModulePayload body() const;
  void set_body(::biot::BiotAppModulePayload value);
  private:
  ::biot::BiotAppModulePayload _internal_body() const;
  void _internal_set_body(::biot::BiotAppModulePayload value);
  public:

  // @@protoc_insertion_point(class_scope:biot.BiotAppCmdApi)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t port_;
    uint32_t ipv4_;
    int trans_;
    int body_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_module_5fnetwork_2eproto;
};
// -------------------------------------------------------------------

class BiotAppRtsp final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:biot.BiotAppRtsp) */ {
 public:
  inline BiotAppRtsp() : BiotAppRtsp(nullptr) {}
  explicit PROTOBUF_CONSTEXPR BiotAppRtsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BiotAppRtsp(const BiotAppRtsp& from);
  BiotAppRtsp(BiotAppRtsp&& from) noexcept
    : BiotAppRtsp() {
    *this = ::std::move(from);
  }

  inline BiotAppRtsp& operator=(const BiotAppRtsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiotAppRtsp& operator=(BiotAppRtsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BiotAppRtsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const BiotAppRtsp* internal_default_instance() {
    return reinterpret_cast<const BiotAppRtsp*>(
               &_BiotAppRtsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BiotAppRtsp& a, BiotAppRtsp& b) {
    a.Swap(&b);
  }
  inline void Swap(BiotAppRtsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BiotAppRtsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BiotAppRtsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BiotAppRtsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BiotAppRtsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BiotAppRtsp& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "biot.BiotAppRtsp";
  }
  protected:
  explicit BiotAppRtsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:biot.BiotAppRtsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_module_5fnetwork_2eproto;
};
// -------------------------------------------------------------------

class BiotAppNetwork final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:biot.BiotAppNetwork) */ {
 public:
  inline BiotAppNetwork() : BiotAppNetwork(nullptr) {}
  ~BiotAppNetwork() override;
  explicit PROTOBUF_CONSTEXPR BiotAppNetwork(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BiotAppNetwork(const BiotAppNetwork& from);
  BiotAppNetwork(BiotAppNetwork&& from) noexcept
    : BiotAppNetwork() {
    *this = ::std::move(from);
  }

  inline BiotAppNetwork& operator=(const BiotAppNetwork& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiotAppNetwork& operator=(BiotAppNetwork&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BiotAppNetwork& default_instance() {
    return *internal_default_instance();
  }
  static inline const BiotAppNetwork* internal_default_instance() {
    return reinterpret_cast<const BiotAppNetwork*>(
               &_BiotAppNetwork_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BiotAppNetwork& a, BiotAppNetwork& b) {
    a.Swap(&b);
  }
  inline void Swap(BiotAppNetwork* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BiotAppNetwork* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BiotAppNetwork* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BiotAppNetwork>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BiotAppNetwork& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BiotAppNetwork& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiotAppNetwork* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "biot.BiotAppNetwork";
  }
  protected:
  explicit BiotAppNetwork(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanFieldNumber = 1,
    kWebFieldNumber = 2,
    kOpenapiFieldNumber = 3,
    kCmdapiFieldNumber = 4,
  };
  // repeated .biot.BiotAppLanParam lan = 1;
  int lan_size() const;
  private:
  int _internal_lan_size() const;
  public:
  void clear_lan();
  ::biot::BiotAppLanParam* mutable_lan(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::biot::BiotAppLanParam >*
      mutable_lan();
  private:
  const ::biot::BiotAppLanParam& _internal_lan(int index) const;
  ::biot::BiotAppLanParam* _internal_add_lan();
  public:
  const ::biot::BiotAppLanParam& lan(int index) const;
  ::biot::BiotAppLanParam* add_lan();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::biot::BiotAppLanParam >&
      lan() const;

  // .biot.BiotAppWebServiceParam web = 2;
  bool has_web() const;
  private:
  bool _internal_has_web() const;
  public:
  void clear_web();
  const ::biot::BiotAppWebServiceParam& web() const;
  PROTOBUF_NODISCARD ::biot::BiotAppWebServiceParam* release_web();
  ::biot::BiotAppWebServiceParam* mutable_web();
  void set_allocated_web(::biot::BiotAppWebServiceParam* web);
  private:
  const ::biot::BiotAppWebServiceParam& _internal_web() const;
  ::biot::BiotAppWebServiceParam* _internal_mutable_web();
  public:
  void unsafe_arena_set_allocated_web(
      ::biot::BiotAppWebServiceParam* web);
  ::biot::BiotAppWebServiceParam* unsafe_arena_release_web();

  // .biot.BiotAppOatppApi openapi = 3;
  bool has_openapi() const;
  private:
  bool _internal_has_openapi() const;
  public:
  void clear_openapi();
  const ::biot::BiotAppOatppApi& openapi() const;
  PROTOBUF_NODISCARD ::biot::BiotAppOatppApi* release_openapi();
  ::biot::BiotAppOatppApi* mutable_openapi();
  void set_allocated_openapi(::biot::BiotAppOatppApi* openapi);
  private:
  const ::biot::BiotAppOatppApi& _internal_openapi() const;
  ::biot::BiotAppOatppApi* _internal_mutable_openapi();
  public:
  void unsafe_arena_set_allocated_openapi(
      ::biot::BiotAppOatppApi* openapi);
  ::biot::BiotAppOatppApi* unsafe_arena_release_openapi();

  // .biot.BiotAppCmdApi cmdapi = 4;
  bool has_cmdapi() const;
  private:
  bool _internal_has_cmdapi() const;
  public:
  void clear_cmdapi();
  const ::biot::BiotAppCmdApi& cmdapi() const;
  PROTOBUF_NODISCARD ::biot::BiotAppCmdApi* release_cmdapi();
  ::biot::BiotAppCmdApi* mutable_cmdapi();
  void set_allocated_cmdapi(::biot::BiotAppCmdApi* cmdapi);
  private:
  const ::biot::BiotAppCmdApi& _internal_cmdapi() const;
  ::biot::BiotAppCmdApi* _internal_mutable_cmdapi();
  public:
  void unsafe_arena_set_allocated_cmdapi(
      ::biot::BiotAppCmdApi* cmdapi);
  ::biot::BiotAppCmdApi* unsafe_arena_release_cmdapi();

  // @@protoc_insertion_point(class_scope:biot.BiotAppNetwork)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::biot::BiotAppLanParam > lan_;
    ::biot::BiotAppWebServiceParam* web_;
    ::biot::BiotAppOatppApi* openapi_;
    ::biot::BiotAppCmdApi* cmdapi_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_module_5fnetwork_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BiotAppLanParam

// .biot.NetLanType type = 1;
inline void BiotAppLanParam::clear_type() {
  _impl_.type_ = 0;
}
inline ::biot::NetLanType BiotAppLanParam::_internal_type() const {
  return static_cast< ::biot::NetLanType >(_impl_.type_);
}
inline ::biot::NetLanType BiotAppLanParam::type() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppLanParam.type)
  return _internal_type();
}
inline void BiotAppLanParam::_internal_set_type(::biot::NetLanType value) {
  
  _impl_.type_ = value;
}
inline void BiotAppLanParam::set_type(::biot::NetLanType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppLanParam.type)
}

// .biot.NetCfgType cfg_type = 2;
inline void BiotAppLanParam::clear_cfg_type() {
  _impl_.cfg_type_ = 0;
}
inline ::biot::NetCfgType BiotAppLanParam::_internal_cfg_type() const {
  return static_cast< ::biot::NetCfgType >(_impl_.cfg_type_);
}
inline ::biot::NetCfgType BiotAppLanParam::cfg_type() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppLanParam.cfg_type)
  return _internal_cfg_type();
}
inline void BiotAppLanParam::_internal_set_cfg_type(::biot::NetCfgType value) {
  
  _impl_.cfg_type_ = value;
}
inline void BiotAppLanParam::set_cfg_type(::biot::NetCfgType value) {
  _internal_set_cfg_type(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppLanParam.cfg_type)
}

// string if_name = 3;
inline void BiotAppLanParam::clear_if_name() {
  _impl_.if_name_.ClearToEmpty();
}
inline const std::string& BiotAppLanParam::if_name() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppLanParam.if_name)
  return _internal_if_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiotAppLanParam::set_if_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.if_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:biot.BiotAppLanParam.if_name)
}
inline std::string* BiotAppLanParam::mutable_if_name() {
  std::string* _s = _internal_mutable_if_name();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppLanParam.if_name)
  return _s;
}
inline const std::string& BiotAppLanParam::_internal_if_name() const {
  return _impl_.if_name_.Get();
}
inline void BiotAppLanParam::_internal_set_if_name(const std::string& value) {
  
  _impl_.if_name_.Set(value, GetArenaForAllocation());
}
inline std::string* BiotAppLanParam::_internal_mutable_if_name() {
  
  return _impl_.if_name_.Mutable(GetArenaForAllocation());
}
inline std::string* BiotAppLanParam::release_if_name() {
  // @@protoc_insertion_point(field_release:biot.BiotAppLanParam.if_name)
  return _impl_.if_name_.Release();
}
inline void BiotAppLanParam::set_allocated_if_name(std::string* if_name) {
  if (if_name != nullptr) {
    
  } else {
    
  }
  _impl_.if_name_.SetAllocated(if_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.if_name_.IsDefault()) {
    _impl_.if_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppLanParam.if_name)
}

// string mac = 4;
inline void BiotAppLanParam::clear_mac() {
  _impl_.mac_.ClearToEmpty();
}
inline const std::string& BiotAppLanParam::mac() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppLanParam.mac)
  return _internal_mac();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiotAppLanParam::set_mac(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mac_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:biot.BiotAppLanParam.mac)
}
inline std::string* BiotAppLanParam::mutable_mac() {
  std::string* _s = _internal_mutable_mac();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppLanParam.mac)
  return _s;
}
inline const std::string& BiotAppLanParam::_internal_mac() const {
  return _impl_.mac_.Get();
}
inline void BiotAppLanParam::_internal_set_mac(const std::string& value) {
  
  _impl_.mac_.Set(value, GetArenaForAllocation());
}
inline std::string* BiotAppLanParam::_internal_mutable_mac() {
  
  return _impl_.mac_.Mutable(GetArenaForAllocation());
}
inline std::string* BiotAppLanParam::release_mac() {
  // @@protoc_insertion_point(field_release:biot.BiotAppLanParam.mac)
  return _impl_.mac_.Release();
}
inline void BiotAppLanParam::set_allocated_mac(std::string* mac) {
  if (mac != nullptr) {
    
  } else {
    
  }
  _impl_.mac_.SetAllocated(mac, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mac_.IsDefault()) {
    _impl_.mac_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppLanParam.mac)
}

// string ipv4 = 5;
inline void BiotAppLanParam::clear_ipv4() {
  _impl_.ipv4_.ClearToEmpty();
}
inline const std::string& BiotAppLanParam::ipv4() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppLanParam.ipv4)
  return _internal_ipv4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiotAppLanParam::set_ipv4(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ipv4_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:biot.BiotAppLanParam.ipv4)
}
inline std::string* BiotAppLanParam::mutable_ipv4() {
  std::string* _s = _internal_mutable_ipv4();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppLanParam.ipv4)
  return _s;
}
inline const std::string& BiotAppLanParam::_internal_ipv4() const {
  return _impl_.ipv4_.Get();
}
inline void BiotAppLanParam::_internal_set_ipv4(const std::string& value) {
  
  _impl_.ipv4_.Set(value, GetArenaForAllocation());
}
inline std::string* BiotAppLanParam::_internal_mutable_ipv4() {
  
  return _impl_.ipv4_.Mutable(GetArenaForAllocation());
}
inline std::string* BiotAppLanParam::release_ipv4() {
  // @@protoc_insertion_point(field_release:biot.BiotAppLanParam.ipv4)
  return _impl_.ipv4_.Release();
}
inline void BiotAppLanParam::set_allocated_ipv4(std::string* ipv4) {
  if (ipv4 != nullptr) {
    
  } else {
    
  }
  _impl_.ipv4_.SetAllocated(ipv4, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ipv4_.IsDefault()) {
    _impl_.ipv4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppLanParam.ipv4)
}

// string ipv6 = 6;
inline void BiotAppLanParam::clear_ipv6() {
  _impl_.ipv6_.ClearToEmpty();
}
inline const std::string& BiotAppLanParam::ipv6() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppLanParam.ipv6)
  return _internal_ipv6();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiotAppLanParam::set_ipv6(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ipv6_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:biot.BiotAppLanParam.ipv6)
}
inline std::string* BiotAppLanParam::mutable_ipv6() {
  std::string* _s = _internal_mutable_ipv6();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppLanParam.ipv6)
  return _s;
}
inline const std::string& BiotAppLanParam::_internal_ipv6() const {
  return _impl_.ipv6_.Get();
}
inline void BiotAppLanParam::_internal_set_ipv6(const std::string& value) {
  
  _impl_.ipv6_.Set(value, GetArenaForAllocation());
}
inline std::string* BiotAppLanParam::_internal_mutable_ipv6() {
  
  return _impl_.ipv6_.Mutable(GetArenaForAllocation());
}
inline std::string* BiotAppLanParam::release_ipv6() {
  // @@protoc_insertion_point(field_release:biot.BiotAppLanParam.ipv6)
  return _impl_.ipv6_.Release();
}
inline void BiotAppLanParam::set_allocated_ipv6(std::string* ipv6) {
  if (ipv6 != nullptr) {
    
  } else {
    
  }
  _impl_.ipv6_.SetAllocated(ipv6, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ipv6_.IsDefault()) {
    _impl_.ipv6_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppLanParam.ipv6)
}

// string submask = 7;
inline void BiotAppLanParam::clear_submask() {
  _impl_.submask_.ClearToEmpty();
}
inline const std::string& BiotAppLanParam::submask() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppLanParam.submask)
  return _internal_submask();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiotAppLanParam::set_submask(ArgT0&& arg0, ArgT... args) {
 
 _impl_.submask_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:biot.BiotAppLanParam.submask)
}
inline std::string* BiotAppLanParam::mutable_submask() {
  std::string* _s = _internal_mutable_submask();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppLanParam.submask)
  return _s;
}
inline const std::string& BiotAppLanParam::_internal_submask() const {
  return _impl_.submask_.Get();
}
inline void BiotAppLanParam::_internal_set_submask(const std::string& value) {
  
  _impl_.submask_.Set(value, GetArenaForAllocation());
}
inline std::string* BiotAppLanParam::_internal_mutable_submask() {
  
  return _impl_.submask_.Mutable(GetArenaForAllocation());
}
inline std::string* BiotAppLanParam::release_submask() {
  // @@protoc_insertion_point(field_release:biot.BiotAppLanParam.submask)
  return _impl_.submask_.Release();
}
inline void BiotAppLanParam::set_allocated_submask(std::string* submask) {
  if (submask != nullptr) {
    
  } else {
    
  }
  _impl_.submask_.SetAllocated(submask, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.submask_.IsDefault()) {
    _impl_.submask_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppLanParam.submask)
}

// string gateway = 8;
inline void BiotAppLanParam::clear_gateway() {
  _impl_.gateway_.ClearToEmpty();
}
inline const std::string& BiotAppLanParam::gateway() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppLanParam.gateway)
  return _internal_gateway();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiotAppLanParam::set_gateway(ArgT0&& arg0, ArgT... args) {
 
 _impl_.gateway_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:biot.BiotAppLanParam.gateway)
}
inline std::string* BiotAppLanParam::mutable_gateway() {
  std::string* _s = _internal_mutable_gateway();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppLanParam.gateway)
  return _s;
}
inline const std::string& BiotAppLanParam::_internal_gateway() const {
  return _impl_.gateway_.Get();
}
inline void BiotAppLanParam::_internal_set_gateway(const std::string& value) {
  
  _impl_.gateway_.Set(value, GetArenaForAllocation());
}
inline std::string* BiotAppLanParam::_internal_mutable_gateway() {
  
  return _impl_.gateway_.Mutable(GetArenaForAllocation());
}
inline std::string* BiotAppLanParam::release_gateway() {
  // @@protoc_insertion_point(field_release:biot.BiotAppLanParam.gateway)
  return _impl_.gateway_.Release();
}
inline void BiotAppLanParam::set_allocated_gateway(std::string* gateway) {
  if (gateway != nullptr) {
    
  } else {
    
  }
  _impl_.gateway_.SetAllocated(gateway, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.gateway_.IsDefault()) {
    _impl_.gateway_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppLanParam.gateway)
}

// uint32 mtu = 9;
inline void BiotAppLanParam::clear_mtu() {
  _impl_.mtu_ = 0u;
}
inline uint32_t BiotAppLanParam::_internal_mtu() const {
  return _impl_.mtu_;
}
inline uint32_t BiotAppLanParam::mtu() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppLanParam.mtu)
  return _internal_mtu();
}
inline void BiotAppLanParam::_internal_set_mtu(uint32_t value) {
  
  _impl_.mtu_ = value;
}
inline void BiotAppLanParam::set_mtu(uint32_t value) {
  _internal_set_mtu(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppLanParam.mtu)
}

// string dns = 10;
inline void BiotAppLanParam::clear_dns() {
  _impl_.dns_.ClearToEmpty();
}
inline const std::string& BiotAppLanParam::dns() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppLanParam.dns)
  return _internal_dns();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiotAppLanParam::set_dns(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dns_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:biot.BiotAppLanParam.dns)
}
inline std::string* BiotAppLanParam::mutable_dns() {
  std::string* _s = _internal_mutable_dns();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppLanParam.dns)
  return _s;
}
inline const std::string& BiotAppLanParam::_internal_dns() const {
  return _impl_.dns_.Get();
}
inline void BiotAppLanParam::_internal_set_dns(const std::string& value) {
  
  _impl_.dns_.Set(value, GetArenaForAllocation());
}
inline std::string* BiotAppLanParam::_internal_mutable_dns() {
  
  return _impl_.dns_.Mutable(GetArenaForAllocation());
}
inline std::string* BiotAppLanParam::release_dns() {
  // @@protoc_insertion_point(field_release:biot.BiotAppLanParam.dns)
  return _impl_.dns_.Release();
}
inline void BiotAppLanParam::set_allocated_dns(std::string* dns) {
  if (dns != nullptr) {
    
  } else {
    
  }
  _impl_.dns_.SetAllocated(dns, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dns_.IsDefault()) {
    _impl_.dns_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppLanParam.dns)
}

// float x1 = 11;
inline void BiotAppLanParam::clear_x1() {
  _impl_.x1_ = 0;
}
inline float BiotAppLanParam::_internal_x1() const {
  return _impl_.x1_;
}
inline float BiotAppLanParam::x1() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppLanParam.x1)
  return _internal_x1();
}
inline void BiotAppLanParam::_internal_set_x1(float value) {
  
  _impl_.x1_ = value;
}
inline void BiotAppLanParam::set_x1(float value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppLanParam.x1)
}

// double x2 = 12;
inline void BiotAppLanParam::clear_x2() {
  _impl_.x2_ = 0;
}
inline double BiotAppLanParam::_internal_x2() const {
  return _impl_.x2_;
}
inline double BiotAppLanParam::x2() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppLanParam.x2)
  return _internal_x2();
}
inline void BiotAppLanParam::_internal_set_x2(double value) {
  
  _impl_.x2_ = value;
}
inline void BiotAppLanParam::set_x2(double value) {
  _internal_set_x2(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppLanParam.x2)
}

// bool x3 = 13;
inline void BiotAppLanParam::clear_x3() {
  _impl_.x3_ = false;
}
inline bool BiotAppLanParam::_internal_x3() const {
  return _impl_.x3_;
}
inline bool BiotAppLanParam::x3() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppLanParam.x3)
  return _internal_x3();
}
inline void BiotAppLanParam::_internal_set_x3(bool value) {
  
  _impl_.x3_ = value;
}
inline void BiotAppLanParam::set_x3(bool value) {
  _internal_set_x3(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppLanParam.x3)
}

// -------------------------------------------------------------------

// BiotAppWebServiceParam

// uint32 http_port = 1;
inline void BiotAppWebServiceParam::clear_http_port() {
  _impl_.http_port_ = 0u;
}
inline uint32_t BiotAppWebServiceParam::_internal_http_port() const {
  return _impl_.http_port_;
}
inline uint32_t BiotAppWebServiceParam::http_port() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppWebServiceParam.http_port)
  return _internal_http_port();
}
inline void BiotAppWebServiceParam::_internal_set_http_port(uint32_t value) {
  
  _impl_.http_port_ = value;
}
inline void BiotAppWebServiceParam::set_http_port(uint32_t value) {
  _internal_set_http_port(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppWebServiceParam.http_port)
}

// uint32 https_port = 2;
inline void BiotAppWebServiceParam::clear_https_port() {
  _impl_.https_port_ = 0u;
}
inline uint32_t BiotAppWebServiceParam::_internal_https_port() const {
  return _impl_.https_port_;
}
inline uint32_t BiotAppWebServiceParam::https_port() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppWebServiceParam.https_port)
  return _internal_https_port();
}
inline void BiotAppWebServiceParam::_internal_set_https_port(uint32_t value) {
  
  _impl_.https_port_ = value;
}
inline void BiotAppWebServiceParam::set_https_port(uint32_t value) {
  _internal_set_https_port(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppWebServiceParam.https_port)
}

// bool http = 3;
inline void BiotAppWebServiceParam::clear_http() {
  _impl_.http_ = false;
}
inline bool BiotAppWebServiceParam::_internal_http() const {
  return _impl_.http_;
}
inline bool BiotAppWebServiceParam::http() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppWebServiceParam.http)
  return _internal_http();
}
inline void BiotAppWebServiceParam::_internal_set_http(bool value) {
  
  _impl_.http_ = value;
}
inline void BiotAppWebServiceParam::set_http(bool value) {
  _internal_set_http(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppWebServiceParam.http)
}

// bool https = 4;
inline void BiotAppWebServiceParam::clear_https() {
  _impl_.https_ = false;
}
inline bool BiotAppWebServiceParam::_internal_https() const {
  return _impl_.https_;
}
inline bool BiotAppWebServiceParam::https() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppWebServiceParam.https)
  return _internal_https();
}
inline void BiotAppWebServiceParam::_internal_set_https(bool value) {
  
  _impl_.https_ = value;
}
inline void BiotAppWebServiceParam::set_https(bool value) {
  _internal_set_https(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppWebServiceParam.https)
}

// string root = 5;
inline void BiotAppWebServiceParam::clear_root() {
  _impl_.root_.ClearToEmpty();
}
inline const std::string& BiotAppWebServiceParam::root() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppWebServiceParam.root)
  return _internal_root();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiotAppWebServiceParam::set_root(ArgT0&& arg0, ArgT... args) {
 
 _impl_.root_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:biot.BiotAppWebServiceParam.root)
}
inline std::string* BiotAppWebServiceParam::mutable_root() {
  std::string* _s = _internal_mutable_root();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppWebServiceParam.root)
  return _s;
}
inline const std::string& BiotAppWebServiceParam::_internal_root() const {
  return _impl_.root_.Get();
}
inline void BiotAppWebServiceParam::_internal_set_root(const std::string& value) {
  
  _impl_.root_.Set(value, GetArenaForAllocation());
}
inline std::string* BiotAppWebServiceParam::_internal_mutable_root() {
  
  return _impl_.root_.Mutable(GetArenaForAllocation());
}
inline std::string* BiotAppWebServiceParam::release_root() {
  // @@protoc_insertion_point(field_release:biot.BiotAppWebServiceParam.root)
  return _impl_.root_.Release();
}
inline void BiotAppWebServiceParam::set_allocated_root(std::string* root) {
  if (root != nullptr) {
    
  } else {
    
  }
  _impl_.root_.SetAllocated(root, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.root_.IsDefault()) {
    _impl_.root_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppWebServiceParam.root)
}

// uint32 connect_max = 6;
inline void BiotAppWebServiceParam::clear_connect_max() {
  _impl_.connect_max_ = 0u;
}
inline uint32_t BiotAppWebServiceParam::_internal_connect_max() const {
  return _impl_.connect_max_;
}
inline uint32_t BiotAppWebServiceParam::connect_max() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppWebServiceParam.connect_max)
  return _internal_connect_max();
}
inline void BiotAppWebServiceParam::_internal_set_connect_max(uint32_t value) {
  
  _impl_.connect_max_ = value;
}
inline void BiotAppWebServiceParam::set_connect_max(uint32_t value) {
  _internal_set_connect_max(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppWebServiceParam.connect_max)
}

// -------------------------------------------------------------------

// BiotAppOatppApi

// uint32 port = 1;
inline void BiotAppOatppApi::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t BiotAppOatppApi::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t BiotAppOatppApi::port() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppOatppApi.port)
  return _internal_port();
}
inline void BiotAppOatppApi::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void BiotAppOatppApi::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppOatppApi.port)
}

// uint32 ipv4 = 2;
inline void BiotAppOatppApi::clear_ipv4() {
  _impl_.ipv4_ = 0u;
}
inline uint32_t BiotAppOatppApi::_internal_ipv4() const {
  return _impl_.ipv4_;
}
inline uint32_t BiotAppOatppApi::ipv4() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppOatppApi.ipv4)
  return _internal_ipv4();
}
inline void BiotAppOatppApi::_internal_set_ipv4(uint32_t value) {
  
  _impl_.ipv4_ = value;
}
inline void BiotAppOatppApi::set_ipv4(uint32_t value) {
  _internal_set_ipv4(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppOatppApi.ipv4)
}

// .biot.BiotAppModulePayload body = 3;
inline void BiotAppOatppApi::clear_body() {
  _impl_.body_ = 0;
}
inline ::biot::BiotAppModulePayload BiotAppOatppApi::_internal_body() const {
  return static_cast< ::biot::BiotAppModulePayload >(_impl_.body_);
}
inline ::biot::BiotAppModulePayload BiotAppOatppApi::body() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppOatppApi.body)
  return _internal_body();
}
inline void BiotAppOatppApi::_internal_set_body(::biot::BiotAppModulePayload value) {
  
  _impl_.body_ = value;
}
inline void BiotAppOatppApi::set_body(::biot::BiotAppModulePayload value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppOatppApi.body)
}

// -------------------------------------------------------------------

// BiotAppCmdApi

// uint32 port = 1;
inline void BiotAppCmdApi::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t BiotAppCmdApi::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t BiotAppCmdApi::port() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppCmdApi.port)
  return _internal_port();
}
inline void BiotAppCmdApi::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void BiotAppCmdApi::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppCmdApi.port)
}

// uint32 ipv4 = 2;
inline void BiotAppCmdApi::clear_ipv4() {
  _impl_.ipv4_ = 0u;
}
inline uint32_t BiotAppCmdApi::_internal_ipv4() const {
  return _impl_.ipv4_;
}
inline uint32_t BiotAppCmdApi::ipv4() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppCmdApi.ipv4)
  return _internal_ipv4();
}
inline void BiotAppCmdApi::_internal_set_ipv4(uint32_t value) {
  
  _impl_.ipv4_ = value;
}
inline void BiotAppCmdApi::set_ipv4(uint32_t value) {
  _internal_set_ipv4(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppCmdApi.ipv4)
}

// .biot.BiotAppModuleProtocol trans = 3;
inline void BiotAppCmdApi::clear_trans() {
  _impl_.trans_ = 0;
}
inline ::biot::BiotAppModuleProtocol BiotAppCmdApi::_internal_trans() const {
  return static_cast< ::biot::BiotAppModuleProtocol >(_impl_.trans_);
}
inline ::biot::BiotAppModuleProtocol BiotAppCmdApi::trans() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppCmdApi.trans)
  return _internal_trans();
}
inline void BiotAppCmdApi::_internal_set_trans(::biot::BiotAppModuleProtocol value) {
  
  _impl_.trans_ = value;
}
inline void BiotAppCmdApi::set_trans(::biot::BiotAppModuleProtocol value) {
  _internal_set_trans(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppCmdApi.trans)
}

// .biot.BiotAppModulePayload body = 4;
inline void BiotAppCmdApi::clear_body() {
  _impl_.body_ = 0;
}
inline ::biot::BiotAppModulePayload BiotAppCmdApi::_internal_body() const {
  return static_cast< ::biot::BiotAppModulePayload >(_impl_.body_);
}
inline ::biot::BiotAppModulePayload BiotAppCmdApi::body() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppCmdApi.body)
  return _internal_body();
}
inline void BiotAppCmdApi::_internal_set_body(::biot::BiotAppModulePayload value) {
  
  _impl_.body_ = value;
}
inline void BiotAppCmdApi::set_body(::biot::BiotAppModulePayload value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppCmdApi.body)
}

// -------------------------------------------------------------------

// BiotAppRtsp

// -------------------------------------------------------------------

// BiotAppNetwork

// repeated .biot.BiotAppLanParam lan = 1;
inline int BiotAppNetwork::_internal_lan_size() const {
  return _impl_.lan_.size();
}
inline int BiotAppNetwork::lan_size() const {
  return _internal_lan_size();
}
inline void BiotAppNetwork::clear_lan() {
  _impl_.lan_.Clear();
}
inline ::biot::BiotAppLanParam* BiotAppNetwork::mutable_lan(int index) {
  // @@protoc_insertion_point(field_mutable:biot.BiotAppNetwork.lan)
  return _impl_.lan_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::biot::BiotAppLanParam >*
BiotAppNetwork::mutable_lan() {
  // @@protoc_insertion_point(field_mutable_list:biot.BiotAppNetwork.lan)
  return &_impl_.lan_;
}
inline const ::biot::BiotAppLanParam& BiotAppNetwork::_internal_lan(int index) const {
  return _impl_.lan_.Get(index);
}
inline const ::biot::BiotAppLanParam& BiotAppNetwork::lan(int index) const {
  // @@protoc_insertion_point(field_get:biot.BiotAppNetwork.lan)
  return _internal_lan(index);
}
inline ::biot::BiotAppLanParam* BiotAppNetwork::_internal_add_lan() {
  return _impl_.lan_.Add();
}
inline ::biot::BiotAppLanParam* BiotAppNetwork::add_lan() {
  ::biot::BiotAppLanParam* _add = _internal_add_lan();
  // @@protoc_insertion_point(field_add:biot.BiotAppNetwork.lan)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::biot::BiotAppLanParam >&
BiotAppNetwork::lan() const {
  // @@protoc_insertion_point(field_list:biot.BiotAppNetwork.lan)
  return _impl_.lan_;
}

// .biot.BiotAppWebServiceParam web = 2;
inline bool BiotAppNetwork::_internal_has_web() const {
  return this != internal_default_instance() && _impl_.web_ != nullptr;
}
inline bool BiotAppNetwork::has_web() const {
  return _internal_has_web();
}
inline void BiotAppNetwork::clear_web() {
  if (GetArenaForAllocation() == nullptr && _impl_.web_ != nullptr) {
    delete _impl_.web_;
  }
  _impl_.web_ = nullptr;
}
inline const ::biot::BiotAppWebServiceParam& BiotAppNetwork::_internal_web() const {
  const ::biot::BiotAppWebServiceParam* p = _impl_.web_;
  return p != nullptr ? *p : reinterpret_cast<const ::biot::BiotAppWebServiceParam&>(
      ::biot::_BiotAppWebServiceParam_default_instance_);
}
inline const ::biot::BiotAppWebServiceParam& BiotAppNetwork::web() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppNetwork.web)
  return _internal_web();
}
inline void BiotAppNetwork::unsafe_arena_set_allocated_web(
    ::biot::BiotAppWebServiceParam* web) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.web_);
  }
  _impl_.web_ = web;
  if (web) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:biot.BiotAppNetwork.web)
}
inline ::biot::BiotAppWebServiceParam* BiotAppNetwork::release_web() {
  
  ::biot::BiotAppWebServiceParam* temp = _impl_.web_;
  _impl_.web_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::biot::BiotAppWebServiceParam* BiotAppNetwork::unsafe_arena_release_web() {
  // @@protoc_insertion_point(field_release:biot.BiotAppNetwork.web)
  
  ::biot::BiotAppWebServiceParam* temp = _impl_.web_;
  _impl_.web_ = nullptr;
  return temp;
}
inline ::biot::BiotAppWebServiceParam* BiotAppNetwork::_internal_mutable_web() {
  
  if (_impl_.web_ == nullptr) {
    auto* p = CreateMaybeMessage<::biot::BiotAppWebServiceParam>(GetArenaForAllocation());
    _impl_.web_ = p;
  }
  return _impl_.web_;
}
inline ::biot::BiotAppWebServiceParam* BiotAppNetwork::mutable_web() {
  ::biot::BiotAppWebServiceParam* _msg = _internal_mutable_web();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppNetwork.web)
  return _msg;
}
inline void BiotAppNetwork::set_allocated_web(::biot::BiotAppWebServiceParam* web) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.web_;
  }
  if (web) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(web);
    if (message_arena != submessage_arena) {
      web = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, web, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.web_ = web;
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppNetwork.web)
}

// .biot.BiotAppOatppApi openapi = 3;
inline bool BiotAppNetwork::_internal_has_openapi() const {
  return this != internal_default_instance() && _impl_.openapi_ != nullptr;
}
inline bool BiotAppNetwork::has_openapi() const {
  return _internal_has_openapi();
}
inline void BiotAppNetwork::clear_openapi() {
  if (GetArenaForAllocation() == nullptr && _impl_.openapi_ != nullptr) {
    delete _impl_.openapi_;
  }
  _impl_.openapi_ = nullptr;
}
inline const ::biot::BiotAppOatppApi& BiotAppNetwork::_internal_openapi() const {
  const ::biot::BiotAppOatppApi* p = _impl_.openapi_;
  return p != nullptr ? *p : reinterpret_cast<const ::biot::BiotAppOatppApi&>(
      ::biot::_BiotAppOatppApi_default_instance_);
}
inline const ::biot::BiotAppOatppApi& BiotAppNetwork::openapi() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppNetwork.openapi)
  return _internal_openapi();
}
inline void BiotAppNetwork::unsafe_arena_set_allocated_openapi(
    ::biot::BiotAppOatppApi* openapi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.openapi_);
  }
  _impl_.openapi_ = openapi;
  if (openapi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:biot.BiotAppNetwork.openapi)
}
inline ::biot::BiotAppOatppApi* BiotAppNetwork::release_openapi() {
  
  ::biot::BiotAppOatppApi* temp = _impl_.openapi_;
  _impl_.openapi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::biot::BiotAppOatppApi* BiotAppNetwork::unsafe_arena_release_openapi() {
  // @@protoc_insertion_point(field_release:biot.BiotAppNetwork.openapi)
  
  ::biot::BiotAppOatppApi* temp = _impl_.openapi_;
  _impl_.openapi_ = nullptr;
  return temp;
}
inline ::biot::BiotAppOatppApi* BiotAppNetwork::_internal_mutable_openapi() {
  
  if (_impl_.openapi_ == nullptr) {
    auto* p = CreateMaybeMessage<::biot::BiotAppOatppApi>(GetArenaForAllocation());
    _impl_.openapi_ = p;
  }
  return _impl_.openapi_;
}
inline ::biot::BiotAppOatppApi* BiotAppNetwork::mutable_openapi() {
  ::biot::BiotAppOatppApi* _msg = _internal_mutable_openapi();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppNetwork.openapi)
  return _msg;
}
inline void BiotAppNetwork::set_allocated_openapi(::biot::BiotAppOatppApi* openapi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.openapi_;
  }
  if (openapi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(openapi);
    if (message_arena != submessage_arena) {
      openapi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, openapi, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.openapi_ = openapi;
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppNetwork.openapi)
}

// .biot.BiotAppCmdApi cmdapi = 4;
inline bool BiotAppNetwork::_internal_has_cmdapi() const {
  return this != internal_default_instance() && _impl_.cmdapi_ != nullptr;
}
inline bool BiotAppNetwork::has_cmdapi() const {
  return _internal_has_cmdapi();
}
inline void BiotAppNetwork::clear_cmdapi() {
  if (GetArenaForAllocation() == nullptr && _impl_.cmdapi_ != nullptr) {
    delete _impl_.cmdapi_;
  }
  _impl_.cmdapi_ = nullptr;
}
inline const ::biot::BiotAppCmdApi& BiotAppNetwork::_internal_cmdapi() const {
  const ::biot::BiotAppCmdApi* p = _impl_.cmdapi_;
  return p != nullptr ? *p : reinterpret_cast<const ::biot::BiotAppCmdApi&>(
      ::biot::_BiotAppCmdApi_default_instance_);
}
inline const ::biot::BiotAppCmdApi& BiotAppNetwork::cmdapi() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppNetwork.cmdapi)
  return _internal_cmdapi();
}
inline void BiotAppNetwork::unsafe_arena_set_allocated_cmdapi(
    ::biot::BiotAppCmdApi* cmdapi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cmdapi_);
  }
  _impl_.cmdapi_ = cmdapi;
  if (cmdapi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:biot.BiotAppNetwork.cmdapi)
}
inline ::biot::BiotAppCmdApi* BiotAppNetwork::release_cmdapi() {
  
  ::biot::BiotAppCmdApi* temp = _impl_.cmdapi_;
  _impl_.cmdapi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::biot::BiotAppCmdApi* BiotAppNetwork::unsafe_arena_release_cmdapi() {
  // @@protoc_insertion_point(field_release:biot.BiotAppNetwork.cmdapi)
  
  ::biot::BiotAppCmdApi* temp = _impl_.cmdapi_;
  _impl_.cmdapi_ = nullptr;
  return temp;
}
inline ::biot::BiotAppCmdApi* BiotAppNetwork::_internal_mutable_cmdapi() {
  
  if (_impl_.cmdapi_ == nullptr) {
    auto* p = CreateMaybeMessage<::biot::BiotAppCmdApi>(GetArenaForAllocation());
    _impl_.cmdapi_ = p;
  }
  return _impl_.cmdapi_;
}
inline ::biot::BiotAppCmdApi* BiotAppNetwork::mutable_cmdapi() {
  ::biot::BiotAppCmdApi* _msg = _internal_mutable_cmdapi();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppNetwork.cmdapi)
  return _msg;
}
inline void BiotAppNetwork::set_allocated_cmdapi(::biot::BiotAppCmdApi* cmdapi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cmdapi_;
  }
  if (cmdapi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cmdapi);
    if (message_arena != submessage_arena) {
      cmdapi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cmdapi, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.cmdapi_ = cmdapi;
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppNetwork.cmdapi)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace biot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_module_5fnetwork_2eproto
