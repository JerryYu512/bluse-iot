// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: param_basic.proto

#include "param_basic.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace biot {
PROTOBUF_CONSTEXPR BiotAppAccessUser::BiotAppAccessUser(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.passwd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.permission_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.phone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.github_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.expired_)*/uint64_t{0u}
  , /*decltype(_impl_.allowlist_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BiotAppAccessUserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BiotAppAccessUserDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BiotAppAccessUserDefaultTypeInternal() {}
  union {
    BiotAppAccessUser _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BiotAppAccessUserDefaultTypeInternal _BiotAppAccessUser_default_instance_;
PROTOBUF_CONSTEXPR BiotAppUsers::BiotAppUsers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.access_users_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BiotAppUsersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BiotAppUsersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BiotAppUsersDefaultTypeInternal() {}
  union {
    BiotAppUsers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BiotAppUsersDefaultTypeInternal _BiotAppUsers_default_instance_;
PROTOBUF_CONSTEXPR BiotAppBasicParam::BiotAppBasicParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.appmode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BiotAppBasicParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BiotAppBasicParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BiotAppBasicParamDefaultTypeInternal() {}
  union {
    BiotAppBasicParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BiotAppBasicParamDefaultTypeInternal _BiotAppBasicParam_default_instance_;
}  // namespace biot
static ::_pb::Metadata file_level_metadata_param_5fbasic_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_param_5fbasic_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_param_5fbasic_2eproto = nullptr;

const uint32_t TableStruct_param_5fbasic_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppAccessUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppAccessUser, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppAccessUser, _impl_.passwd_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppAccessUser, _impl_.expired_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppAccessUser, _impl_.permission_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppAccessUser, _impl_.allowlist_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppAccessUser, _impl_.email_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppAccessUser, _impl_.phone_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppAccessUser, _impl_.github_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppUsers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppUsers, _impl_.access_users_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppBasicParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppBasicParam, _impl_.appmode_),
  PROTOBUF_FIELD_OFFSET(::biot::BiotAppBasicParam, _impl_.user_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::biot::BiotAppAccessUser)},
  { 14, -1, -1, sizeof(::biot::BiotAppUsers)},
  { 21, -1, -1, sizeof(::biot::BiotAppBasicParam)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::biot::_BiotAppAccessUser_default_instance_._instance,
  &::biot::_BiotAppUsers_default_instance_._instance,
  &::biot::_BiotAppBasicParam_default_instance_._instance,
};

const char descriptor_table_protodef_param_5fbasic_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021param_basic.proto\022\004biot\032\023enums/e_basic"
  ".proto\"\227\001\n\021BiotAppAccessUser\022\014\n\004name\030\001 \001"
  "(\t\022\016\n\006passwd\030\002 \001(\t\022\017\n\007expired\030\003 \001(\004\022\022\n\np"
  "ermission\030\004 \001(\t\022\021\n\tallowlist\030\005 \001(\010\022\r\n\005em"
  "ail\030\006 \001(\t\022\r\n\005phone\030\007 \001(\t\022\016\n\006github\030\010 \001(\t"
  "\"=\n\014BiotAppUsers\022-\n\014access_users\030\001 \003(\0132\027"
  ".biot.BiotAppAccessUser\"Z\n\021BiotAppBasicP"
  "aram\022#\n\007appmode\030\001 \001(\0162\022.biot.EBiotAppMod"
  "e\022 \n\004user\030\002 \001(\0132\022.biot.BiotAppUsersb\006pro"
  "to3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_param_5fbasic_2eproto_deps[1] = {
  &::descriptor_table_enums_2fe_5fbasic_2eproto,
};
static ::_pbi::once_flag descriptor_table_param_5fbasic_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_param_5fbasic_2eproto = {
    false, false, 363, descriptor_table_protodef_param_5fbasic_2eproto,
    "param_basic.proto",
    &descriptor_table_param_5fbasic_2eproto_once, descriptor_table_param_5fbasic_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_param_5fbasic_2eproto::offsets,
    file_level_metadata_param_5fbasic_2eproto, file_level_enum_descriptors_param_5fbasic_2eproto,
    file_level_service_descriptors_param_5fbasic_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_param_5fbasic_2eproto_getter() {
  return &descriptor_table_param_5fbasic_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_param_5fbasic_2eproto(&descriptor_table_param_5fbasic_2eproto);
namespace biot {

// ===================================================================

class BiotAppAccessUser::_Internal {
 public:
};

BiotAppAccessUser::BiotAppAccessUser(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:biot.BiotAppAccessUser)
}
BiotAppAccessUser::BiotAppAccessUser(const BiotAppAccessUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.passwd_){}
    , decltype(_impl_.permission_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.phone_){}
    , decltype(_impl_.github_){}
    , decltype(_impl_.expired_){}
    , decltype(_impl_.allowlist_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _impl_.name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  _impl_.passwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_passwd().empty()) {
    _impl_.passwd_.Set(from._internal_passwd(), 
      GetArenaForAllocation());
  }
  _impl_.permission_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.permission_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_permission().empty()) {
    _impl_.permission_.Set(from._internal_permission(), 
      GetArenaForAllocation());
  }
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_email().empty()) {
    _impl_.email_.Set(from._internal_email(), 
      GetArenaForAllocation());
  }
  _impl_.phone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_phone().empty()) {
    _impl_.phone_.Set(from._internal_phone(), 
      GetArenaForAllocation());
  }
  _impl_.github_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.github_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_github().empty()) {
    _impl_.github_.Set(from._internal_github(), 
      GetArenaForAllocation());
  }
  ::memcpy(&_impl_.expired_, &from._impl_.expired_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.allowlist_) -
    reinterpret_cast<char*>(&_impl_.expired_)) + sizeof(_impl_.allowlist_));
  // @@protoc_insertion_point(copy_constructor:biot.BiotAppAccessUser)
}

inline void BiotAppAccessUser::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.passwd_){}
    , decltype(_impl_.permission_){}
    , decltype(_impl_.email_){}
    , decltype(_impl_.phone_){}
    , decltype(_impl_.github_){}
    , decltype(_impl_.expired_){uint64_t{0u}}
    , decltype(_impl_.allowlist_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.passwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.permission_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.permission_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.phone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.github_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.github_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BiotAppAccessUser::~BiotAppAccessUser() {
  // @@protoc_insertion_point(destructor:biot.BiotAppAccessUser)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BiotAppAccessUser::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.passwd_.Destroy();
  _impl_.permission_.Destroy();
  _impl_.email_.Destroy();
  _impl_.phone_.Destroy();
  _impl_.github_.Destroy();
}

void BiotAppAccessUser::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BiotAppAccessUser::Clear() {
// @@protoc_insertion_point(message_clear_start:biot.BiotAppAccessUser)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.passwd_.ClearToEmpty();
  _impl_.permission_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _impl_.phone_.ClearToEmpty();
  _impl_.github_.ClearToEmpty();
  ::memset(&_impl_.expired_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.allowlist_) -
      reinterpret_cast<char*>(&_impl_.expired_)) + sizeof(_impl_.allowlist_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BiotAppAccessUser::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "biot.BiotAppAccessUser.name"));
        } else
          goto handle_unusual;
        continue;
      // string passwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_passwd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "biot.BiotAppAccessUser.passwd"));
        } else
          goto handle_unusual;
        continue;
      // uint64 expired = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.expired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string permission = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_permission();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "biot.BiotAppAccessUser.permission"));
        } else
          goto handle_unusual;
        continue;
      // bool allowlist = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.allowlist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string email = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "biot.BiotAppAccessUser.email"));
        } else
          goto handle_unusual;
        continue;
      // string phone = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_phone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "biot.BiotAppAccessUser.phone"));
        } else
          goto handle_unusual;
        continue;
      // string github = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_github();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "biot.BiotAppAccessUser.github"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BiotAppAccessUser::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:biot.BiotAppAccessUser)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "biot.BiotAppAccessUser.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string passwd = 2;
  if (!this->_internal_passwd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_passwd().data(), static_cast<int>(this->_internal_passwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "biot.BiotAppAccessUser.passwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_passwd(), target);
  }

  // uint64 expired = 3;
  if (this->_internal_expired() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_expired(), target);
  }

  // string permission = 4;
  if (!this->_internal_permission().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_permission().data(), static_cast<int>(this->_internal_permission().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "biot.BiotAppAccessUser.permission");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_permission(), target);
  }

  // bool allowlist = 5;
  if (this->_internal_allowlist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_allowlist(), target);
  }

  // string email = 6;
  if (!this->_internal_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "biot.BiotAppAccessUser.email");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_email(), target);
  }

  // string phone = 7;
  if (!this->_internal_phone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phone().data(), static_cast<int>(this->_internal_phone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "biot.BiotAppAccessUser.phone");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_phone(), target);
  }

  // string github = 8;
  if (!this->_internal_github().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_github().data(), static_cast<int>(this->_internal_github().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "biot.BiotAppAccessUser.github");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_github(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:biot.BiotAppAccessUser)
  return target;
}

size_t BiotAppAccessUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:biot.BiotAppAccessUser)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string passwd = 2;
  if (!this->_internal_passwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passwd());
  }

  // string permission = 4;
  if (!this->_internal_permission().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_permission());
  }

  // string email = 6;
  if (!this->_internal_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string phone = 7;
  if (!this->_internal_phone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phone());
  }

  // string github = 8;
  if (!this->_internal_github().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_github());
  }

  // uint64 expired = 3;
  if (this->_internal_expired() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_expired());
  }

  // bool allowlist = 5;
  if (this->_internal_allowlist() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BiotAppAccessUser::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BiotAppAccessUser::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BiotAppAccessUser::GetClassData() const { return &_class_data_; }

void BiotAppAccessUser::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BiotAppAccessUser *>(to)->MergeFrom(
      static_cast<const BiotAppAccessUser &>(from));
}


void BiotAppAccessUser::MergeFrom(const BiotAppAccessUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:biot.BiotAppAccessUser)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_passwd().empty()) {
    _internal_set_passwd(from._internal_passwd());
  }
  if (!from._internal_permission().empty()) {
    _internal_set_permission(from._internal_permission());
  }
  if (!from._internal_email().empty()) {
    _internal_set_email(from._internal_email());
  }
  if (!from._internal_phone().empty()) {
    _internal_set_phone(from._internal_phone());
  }
  if (!from._internal_github().empty()) {
    _internal_set_github(from._internal_github());
  }
  if (from._internal_expired() != 0) {
    _internal_set_expired(from._internal_expired());
  }
  if (from._internal_allowlist() != 0) {
    _internal_set_allowlist(from._internal_allowlist());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BiotAppAccessUser::CopyFrom(const BiotAppAccessUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:biot.BiotAppAccessUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiotAppAccessUser::IsInitialized() const {
  return true;
}

void BiotAppAccessUser::InternalSwap(BiotAppAccessUser* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.passwd_, lhs_arena,
      &other->_impl_.passwd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.permission_, lhs_arena,
      &other->_impl_.permission_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_, lhs_arena,
      &other->_impl_.email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.phone_, lhs_arena,
      &other->_impl_.phone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.github_, lhs_arena,
      &other->_impl_.github_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BiotAppAccessUser, _impl_.allowlist_)
      + sizeof(BiotAppAccessUser::_impl_.allowlist_)
      - PROTOBUF_FIELD_OFFSET(BiotAppAccessUser, _impl_.expired_)>(
          reinterpret_cast<char*>(&_impl_.expired_),
          reinterpret_cast<char*>(&other->_impl_.expired_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BiotAppAccessUser::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_param_5fbasic_2eproto_getter, &descriptor_table_param_5fbasic_2eproto_once,
      file_level_metadata_param_5fbasic_2eproto[0]);
}

// ===================================================================

class BiotAppUsers::_Internal {
 public:
};

BiotAppUsers::BiotAppUsers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:biot.BiotAppUsers)
}
BiotAppUsers::BiotAppUsers(const BiotAppUsers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.access_users_){from._impl_.access_users_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:biot.BiotAppUsers)
}

inline void BiotAppUsers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.access_users_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BiotAppUsers::~BiotAppUsers() {
  // @@protoc_insertion_point(destructor:biot.BiotAppUsers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BiotAppUsers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.access_users_.~RepeatedPtrField();
}

void BiotAppUsers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BiotAppUsers::Clear() {
// @@protoc_insertion_point(message_clear_start:biot.BiotAppUsers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.access_users_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BiotAppUsers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .biot.BiotAppAccessUser access_users = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_access_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BiotAppUsers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:biot.BiotAppUsers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .biot.BiotAppAccessUser access_users = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_access_users_size()); i < n; i++) {
    const auto& repfield = this->_internal_access_users(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:biot.BiotAppUsers)
  return target;
}

size_t BiotAppUsers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:biot.BiotAppUsers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .biot.BiotAppAccessUser access_users = 1;
  total_size += 1UL * this->_internal_access_users_size();
  for (const auto& msg : this->_impl_.access_users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BiotAppUsers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BiotAppUsers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BiotAppUsers::GetClassData() const { return &_class_data_; }

void BiotAppUsers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BiotAppUsers *>(to)->MergeFrom(
      static_cast<const BiotAppUsers &>(from));
}


void BiotAppUsers::MergeFrom(const BiotAppUsers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:biot.BiotAppUsers)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _impl_.access_users_.MergeFrom(from._impl_.access_users_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BiotAppUsers::CopyFrom(const BiotAppUsers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:biot.BiotAppUsers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiotAppUsers::IsInitialized() const {
  return true;
}

void BiotAppUsers::InternalSwap(BiotAppUsers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.access_users_.InternalSwap(&other->_impl_.access_users_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BiotAppUsers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_param_5fbasic_2eproto_getter, &descriptor_table_param_5fbasic_2eproto_once,
      file_level_metadata_param_5fbasic_2eproto[1]);
}

// ===================================================================

class BiotAppBasicParam::_Internal {
 public:
  static const ::biot::BiotAppUsers& user(const BiotAppBasicParam* msg);
};

const ::biot::BiotAppUsers&
BiotAppBasicParam::_Internal::user(const BiotAppBasicParam* msg) {
  return *msg->_impl_.user_;
}
BiotAppBasicParam::BiotAppBasicParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:biot.BiotAppBasicParam)
}
BiotAppBasicParam::BiotAppBasicParam(const BiotAppBasicParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_.user_){nullptr}
    , decltype(_impl_.appmode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    _impl_.user_ = new ::biot::BiotAppUsers(*from._impl_.user_);
  }
  _impl_.appmode_ = from._impl_.appmode_;
  // @@protoc_insertion_point(copy_constructor:biot.BiotAppBasicParam)
}

inline void BiotAppBasicParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){nullptr}
    , decltype(_impl_.appmode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BiotAppBasicParam::~BiotAppBasicParam() {
  // @@protoc_insertion_point(destructor:biot.BiotAppBasicParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BiotAppBasicParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void BiotAppBasicParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BiotAppBasicParam::Clear() {
// @@protoc_insertion_point(message_clear_start:biot.BiotAppBasicParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_ != nullptr) {
    delete _impl_.user_;
  }
  _impl_.user_ = nullptr;
  _impl_.appmode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BiotAppBasicParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .biot.EBiotAppMode appmode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_appmode(static_cast<::biot::EBiotAppMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .biot.BiotAppUsers user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BiotAppBasicParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:biot.BiotAppBasicParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .biot.EBiotAppMode appmode = 1;
  if (this->_internal_appmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_appmode(), target);
  }

  // .biot.BiotAppUsers user = 2;
  if (this->_internal_has_user()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:biot.BiotAppBasicParam)
  return target;
}

size_t BiotAppBasicParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:biot.BiotAppBasicParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .biot.BiotAppUsers user = 2;
  if (this->_internal_has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  // .biot.EBiotAppMode appmode = 1;
  if (this->_internal_appmode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_appmode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BiotAppBasicParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BiotAppBasicParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BiotAppBasicParam::GetClassData() const { return &_class_data_; }

void BiotAppBasicParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BiotAppBasicParam *>(to)->MergeFrom(
      static_cast<const BiotAppBasicParam &>(from));
}


void BiotAppBasicParam::MergeFrom(const BiotAppBasicParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:biot.BiotAppBasicParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user()) {
    _internal_mutable_user()->::biot::BiotAppUsers::MergeFrom(from._internal_user());
  }
  if (from._internal_appmode() != 0) {
    _internal_set_appmode(from._internal_appmode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BiotAppBasicParam::CopyFrom(const BiotAppBasicParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:biot.BiotAppBasicParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiotAppBasicParam::IsInitialized() const {
  return true;
}

void BiotAppBasicParam::InternalSwap(BiotAppBasicParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BiotAppBasicParam, _impl_.appmode_)
      + sizeof(BiotAppBasicParam::_impl_.appmode_)
      - PROTOBUF_FIELD_OFFSET(BiotAppBasicParam, _impl_.user_)>(
          reinterpret_cast<char*>(&_impl_.user_),
          reinterpret_cast<char*>(&other->_impl_.user_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BiotAppBasicParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_param_5fbasic_2eproto_getter, &descriptor_table_param_5fbasic_2eproto_once,
      file_level_metadata_param_5fbasic_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace biot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::biot::BiotAppAccessUser*
Arena::CreateMaybeMessage< ::biot::BiotAppAccessUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::biot::BiotAppAccessUser >(arena);
}
template<> PROTOBUF_NOINLINE ::biot::BiotAppUsers*
Arena::CreateMaybeMessage< ::biot::BiotAppUsers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::biot::BiotAppUsers >(arena);
}
template<> PROTOBUF_NOINLINE ::biot::BiotAppBasicParam*
Arena::CreateMaybeMessage< ::biot::BiotAppBasicParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::biot::BiotAppBasicParam >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
