// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: param.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_param_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_param_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "param_basic.pb.h"
#include "param_system.pb.h"
#include "param_module.pb.h"
#include "param_product.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_param_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_param_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_param_2eproto;
namespace biot {
class BiotAppParam;
struct BiotAppParamDefaultTypeInternal;
extern BiotAppParamDefaultTypeInternal _BiotAppParam_default_instance_;
}  // namespace biot
PROTOBUF_NAMESPACE_OPEN
template<> ::biot::BiotAppParam* Arena::CreateMaybeMessage<::biot::BiotAppParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace biot {

// ===================================================================

class BiotAppParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:biot.BiotAppParam) */ {
 public:
  inline BiotAppParam() : BiotAppParam(nullptr) {}
  ~BiotAppParam() override;
  explicit PROTOBUF_CONSTEXPR BiotAppParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BiotAppParam(const BiotAppParam& from);
  BiotAppParam(BiotAppParam&& from) noexcept
    : BiotAppParam() {
    *this = ::std::move(from);
  }

  inline BiotAppParam& operator=(const BiotAppParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiotAppParam& operator=(BiotAppParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BiotAppParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const BiotAppParam* internal_default_instance() {
    return reinterpret_cast<const BiotAppParam*>(
               &_BiotAppParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BiotAppParam& a, BiotAppParam& b) {
    a.Swap(&b);
  }
  inline void Swap(BiotAppParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BiotAppParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BiotAppParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BiotAppParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BiotAppParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BiotAppParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiotAppParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "biot.BiotAppParam";
  }
  protected:
  explicit BiotAppParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kExecUuidFieldNumber = 2,
    kDeviceNameFieldNumber = 4,
    kDeviceIdFieldNumber = 5,
    kBasicFieldNumber = 101,
    kSystemFieldNumber = 102,
    kModulesFieldNumber = 103,
    kProductFieldNumber = 104,
    kVersionFieldNumber = 3,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string exec_uuid = 2;
  void clear_exec_uuid();
  const std::string& exec_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exec_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exec_uuid();
  PROTOBUF_NODISCARD std::string* release_exec_uuid();
  void set_allocated_exec_uuid(std::string* exec_uuid);
  private:
  const std::string& _internal_exec_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exec_uuid(const std::string& value);
  std::string* _internal_mutable_exec_uuid();
  public:

  // string device_name = 4;
  void clear_device_name();
  const std::string& device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);
  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(const std::string& value);
  std::string* _internal_mutable_device_name();
  public:

  // string device_id = 5;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // .biot.BiotAppBasicParam basic = 101;
  bool has_basic() const;
  private:
  bool _internal_has_basic() const;
  public:
  void clear_basic();
  const ::biot::BiotAppBasicParam& basic() const;
  PROTOBUF_NODISCARD ::biot::BiotAppBasicParam* release_basic();
  ::biot::BiotAppBasicParam* mutable_basic();
  void set_allocated_basic(::biot::BiotAppBasicParam* basic);
  private:
  const ::biot::BiotAppBasicParam& _internal_basic() const;
  ::biot::BiotAppBasicParam* _internal_mutable_basic();
  public:
  void unsafe_arena_set_allocated_basic(
      ::biot::BiotAppBasicParam* basic);
  ::biot::BiotAppBasicParam* unsafe_arena_release_basic();

  // .biot.BiotAppSystem system = 102;
  bool has_system() const;
  private:
  bool _internal_has_system() const;
  public:
  void clear_system();
  const ::biot::BiotAppSystem& system() const;
  PROTOBUF_NODISCARD ::biot::BiotAppSystem* release_system();
  ::biot::BiotAppSystem* mutable_system();
  void set_allocated_system(::biot::BiotAppSystem* system);
  private:
  const ::biot::BiotAppSystem& _internal_system() const;
  ::biot::BiotAppSystem* _internal_mutable_system();
  public:
  void unsafe_arena_set_allocated_system(
      ::biot::BiotAppSystem* system);
  ::biot::BiotAppSystem* unsafe_arena_release_system();

  // .biot.BiotAppModule modules = 103;
  bool has_modules() const;
  private:
  bool _internal_has_modules() const;
  public:
  void clear_modules();
  const ::biot::BiotAppModule& modules() const;
  PROTOBUF_NODISCARD ::biot::BiotAppModule* release_modules();
  ::biot::BiotAppModule* mutable_modules();
  void set_allocated_modules(::biot::BiotAppModule* modules);
  private:
  const ::biot::BiotAppModule& _internal_modules() const;
  ::biot::BiotAppModule* _internal_mutable_modules();
  public:
  void unsafe_arena_set_allocated_modules(
      ::biot::BiotAppModule* modules);
  ::biot::BiotAppModule* unsafe_arena_release_modules();

  // .biot.BiotAppProduct product = 104;
  bool has_product() const;
  private:
  bool _internal_has_product() const;
  public:
  void clear_product();
  const ::biot::BiotAppProduct& product() const;
  PROTOBUF_NODISCARD ::biot::BiotAppProduct* release_product();
  ::biot::BiotAppProduct* mutable_product();
  void set_allocated_product(::biot::BiotAppProduct* product);
  private:
  const ::biot::BiotAppProduct& _internal_product() const;
  ::biot::BiotAppProduct* _internal_mutable_product();
  public:
  void unsafe_arena_set_allocated_product(
      ::biot::BiotAppProduct* product);
  ::biot::BiotAppProduct* unsafe_arena_release_product();

  // uint32 version = 3;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:biot.BiotAppParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exec_uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
    ::biot::BiotAppBasicParam* basic_;
    ::biot::BiotAppSystem* system_;
    ::biot::BiotAppModule* modules_;
    ::biot::BiotAppProduct* product_;
    uint32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_param_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BiotAppParam

// string uuid = 1;
inline void BiotAppParam::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& BiotAppParam::uuid() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppParam.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiotAppParam::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:biot.BiotAppParam.uuid)
}
inline std::string* BiotAppParam::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppParam.uuid)
  return _s;
}
inline const std::string& BiotAppParam::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void BiotAppParam::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* BiotAppParam::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* BiotAppParam::release_uuid() {
  // @@protoc_insertion_point(field_release:biot.BiotAppParam.uuid)
  return _impl_.uuid_.Release();
}
inline void BiotAppParam::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppParam.uuid)
}

// string exec_uuid = 2;
inline void BiotAppParam::clear_exec_uuid() {
  _impl_.exec_uuid_.ClearToEmpty();
}
inline const std::string& BiotAppParam::exec_uuid() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppParam.exec_uuid)
  return _internal_exec_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiotAppParam::set_exec_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.exec_uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:biot.BiotAppParam.exec_uuid)
}
inline std::string* BiotAppParam::mutable_exec_uuid() {
  std::string* _s = _internal_mutable_exec_uuid();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppParam.exec_uuid)
  return _s;
}
inline const std::string& BiotAppParam::_internal_exec_uuid() const {
  return _impl_.exec_uuid_.Get();
}
inline void BiotAppParam::_internal_set_exec_uuid(const std::string& value) {
  
  _impl_.exec_uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* BiotAppParam::_internal_mutable_exec_uuid() {
  
  return _impl_.exec_uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* BiotAppParam::release_exec_uuid() {
  // @@protoc_insertion_point(field_release:biot.BiotAppParam.exec_uuid)
  return _impl_.exec_uuid_.Release();
}
inline void BiotAppParam::set_allocated_exec_uuid(std::string* exec_uuid) {
  if (exec_uuid != nullptr) {
    
  } else {
    
  }
  _impl_.exec_uuid_.SetAllocated(exec_uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.exec_uuid_.IsDefault()) {
    _impl_.exec_uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppParam.exec_uuid)
}

// uint32 version = 3;
inline void BiotAppParam::clear_version() {
  _impl_.version_ = 0u;
}
inline uint32_t BiotAppParam::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t BiotAppParam::version() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppParam.version)
  return _internal_version();
}
inline void BiotAppParam::_internal_set_version(uint32_t value) {
  
  _impl_.version_ = value;
}
inline void BiotAppParam::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppParam.version)
}

// string device_name = 4;
inline void BiotAppParam::clear_device_name() {
  _impl_.device_name_.ClearToEmpty();
}
inline const std::string& BiotAppParam::device_name() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppParam.device_name)
  return _internal_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiotAppParam::set_device_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.device_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:biot.BiotAppParam.device_name)
}
inline std::string* BiotAppParam::mutable_device_name() {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppParam.device_name)
  return _s;
}
inline const std::string& BiotAppParam::_internal_device_name() const {
  return _impl_.device_name_.Get();
}
inline void BiotAppParam::_internal_set_device_name(const std::string& value) {
  
  _impl_.device_name_.Set(value, GetArenaForAllocation());
}
inline std::string* BiotAppParam::_internal_mutable_device_name() {
  
  return _impl_.device_name_.Mutable(GetArenaForAllocation());
}
inline std::string* BiotAppParam::release_device_name() {
  // @@protoc_insertion_point(field_release:biot.BiotAppParam.device_name)
  return _impl_.device_name_.Release();
}
inline void BiotAppParam::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    
  } else {
    
  }
  _impl_.device_name_.SetAllocated(device_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_name_.IsDefault()) {
    _impl_.device_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppParam.device_name)
}

// string device_id = 5;
inline void BiotAppParam::clear_device_id() {
  _impl_.device_id_.ClearToEmpty();
}
inline const std::string& BiotAppParam::device_id() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppParam.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiotAppParam::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.device_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:biot.BiotAppParam.device_id)
}
inline std::string* BiotAppParam::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppParam.device_id)
  return _s;
}
inline const std::string& BiotAppParam::_internal_device_id() const {
  return _impl_.device_id_.Get();
}
inline void BiotAppParam::_internal_set_device_id(const std::string& value) {
  
  _impl_.device_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BiotAppParam::_internal_mutable_device_id() {
  
  return _impl_.device_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BiotAppParam::release_device_id() {
  // @@protoc_insertion_point(field_release:biot.BiotAppParam.device_id)
  return _impl_.device_id_.Release();
}
inline void BiotAppParam::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  _impl_.device_id_.SetAllocated(device_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_id_.IsDefault()) {
    _impl_.device_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppParam.device_id)
}

// .biot.BiotAppBasicParam basic = 101;
inline bool BiotAppParam::_internal_has_basic() const {
  return this != internal_default_instance() && _impl_.basic_ != nullptr;
}
inline bool BiotAppParam::has_basic() const {
  return _internal_has_basic();
}
inline const ::biot::BiotAppBasicParam& BiotAppParam::_internal_basic() const {
  const ::biot::BiotAppBasicParam* p = _impl_.basic_;
  return p != nullptr ? *p : reinterpret_cast<const ::biot::BiotAppBasicParam&>(
      ::biot::_BiotAppBasicParam_default_instance_);
}
inline const ::biot::BiotAppBasicParam& BiotAppParam::basic() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppParam.basic)
  return _internal_basic();
}
inline void BiotAppParam::unsafe_arena_set_allocated_basic(
    ::biot::BiotAppBasicParam* basic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.basic_);
  }
  _impl_.basic_ = basic;
  if (basic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:biot.BiotAppParam.basic)
}
inline ::biot::BiotAppBasicParam* BiotAppParam::release_basic() {
  
  ::biot::BiotAppBasicParam* temp = _impl_.basic_;
  _impl_.basic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::biot::BiotAppBasicParam* BiotAppParam::unsafe_arena_release_basic() {
  // @@protoc_insertion_point(field_release:biot.BiotAppParam.basic)
  
  ::biot::BiotAppBasicParam* temp = _impl_.basic_;
  _impl_.basic_ = nullptr;
  return temp;
}
inline ::biot::BiotAppBasicParam* BiotAppParam::_internal_mutable_basic() {
  
  if (_impl_.basic_ == nullptr) {
    auto* p = CreateMaybeMessage<::biot::BiotAppBasicParam>(GetArenaForAllocation());
    _impl_.basic_ = p;
  }
  return _impl_.basic_;
}
inline ::biot::BiotAppBasicParam* BiotAppParam::mutable_basic() {
  ::biot::BiotAppBasicParam* _msg = _internal_mutable_basic();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppParam.basic)
  return _msg;
}
inline void BiotAppParam::set_allocated_basic(::biot::BiotAppBasicParam* basic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.basic_);
  }
  if (basic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(basic));
    if (message_arena != submessage_arena) {
      basic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basic, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.basic_ = basic;
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppParam.basic)
}

// .biot.BiotAppSystem system = 102;
inline bool BiotAppParam::_internal_has_system() const {
  return this != internal_default_instance() && _impl_.system_ != nullptr;
}
inline bool BiotAppParam::has_system() const {
  return _internal_has_system();
}
inline const ::biot::BiotAppSystem& BiotAppParam::_internal_system() const {
  const ::biot::BiotAppSystem* p = _impl_.system_;
  return p != nullptr ? *p : reinterpret_cast<const ::biot::BiotAppSystem&>(
      ::biot::_BiotAppSystem_default_instance_);
}
inline const ::biot::BiotAppSystem& BiotAppParam::system() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppParam.system)
  return _internal_system();
}
inline void BiotAppParam::unsafe_arena_set_allocated_system(
    ::biot::BiotAppSystem* system) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.system_);
  }
  _impl_.system_ = system;
  if (system) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:biot.BiotAppParam.system)
}
inline ::biot::BiotAppSystem* BiotAppParam::release_system() {
  
  ::biot::BiotAppSystem* temp = _impl_.system_;
  _impl_.system_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::biot::BiotAppSystem* BiotAppParam::unsafe_arena_release_system() {
  // @@protoc_insertion_point(field_release:biot.BiotAppParam.system)
  
  ::biot::BiotAppSystem* temp = _impl_.system_;
  _impl_.system_ = nullptr;
  return temp;
}
inline ::biot::BiotAppSystem* BiotAppParam::_internal_mutable_system() {
  
  if (_impl_.system_ == nullptr) {
    auto* p = CreateMaybeMessage<::biot::BiotAppSystem>(GetArenaForAllocation());
    _impl_.system_ = p;
  }
  return _impl_.system_;
}
inline ::biot::BiotAppSystem* BiotAppParam::mutable_system() {
  ::biot::BiotAppSystem* _msg = _internal_mutable_system();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppParam.system)
  return _msg;
}
inline void BiotAppParam::set_allocated_system(::biot::BiotAppSystem* system) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.system_);
  }
  if (system) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(system));
    if (message_arena != submessage_arena) {
      system = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.system_ = system;
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppParam.system)
}

// .biot.BiotAppModule modules = 103;
inline bool BiotAppParam::_internal_has_modules() const {
  return this != internal_default_instance() && _impl_.modules_ != nullptr;
}
inline bool BiotAppParam::has_modules() const {
  return _internal_has_modules();
}
inline const ::biot::BiotAppModule& BiotAppParam::_internal_modules() const {
  const ::biot::BiotAppModule* p = _impl_.modules_;
  return p != nullptr ? *p : reinterpret_cast<const ::biot::BiotAppModule&>(
      ::biot::_BiotAppModule_default_instance_);
}
inline const ::biot::BiotAppModule& BiotAppParam::modules() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppParam.modules)
  return _internal_modules();
}
inline void BiotAppParam::unsafe_arena_set_allocated_modules(
    ::biot::BiotAppModule* modules) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.modules_);
  }
  _impl_.modules_ = modules;
  if (modules) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:biot.BiotAppParam.modules)
}
inline ::biot::BiotAppModule* BiotAppParam::release_modules() {
  
  ::biot::BiotAppModule* temp = _impl_.modules_;
  _impl_.modules_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::biot::BiotAppModule* BiotAppParam::unsafe_arena_release_modules() {
  // @@protoc_insertion_point(field_release:biot.BiotAppParam.modules)
  
  ::biot::BiotAppModule* temp = _impl_.modules_;
  _impl_.modules_ = nullptr;
  return temp;
}
inline ::biot::BiotAppModule* BiotAppParam::_internal_mutable_modules() {
  
  if (_impl_.modules_ == nullptr) {
    auto* p = CreateMaybeMessage<::biot::BiotAppModule>(GetArenaForAllocation());
    _impl_.modules_ = p;
  }
  return _impl_.modules_;
}
inline ::biot::BiotAppModule* BiotAppParam::mutable_modules() {
  ::biot::BiotAppModule* _msg = _internal_mutable_modules();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppParam.modules)
  return _msg;
}
inline void BiotAppParam::set_allocated_modules(::biot::BiotAppModule* modules) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.modules_);
  }
  if (modules) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modules));
    if (message_arena != submessage_arena) {
      modules = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modules, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.modules_ = modules;
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppParam.modules)
}

// .biot.BiotAppProduct product = 104;
inline bool BiotAppParam::_internal_has_product() const {
  return this != internal_default_instance() && _impl_.product_ != nullptr;
}
inline bool BiotAppParam::has_product() const {
  return _internal_has_product();
}
inline const ::biot::BiotAppProduct& BiotAppParam::_internal_product() const {
  const ::biot::BiotAppProduct* p = _impl_.product_;
  return p != nullptr ? *p : reinterpret_cast<const ::biot::BiotAppProduct&>(
      ::biot::_BiotAppProduct_default_instance_);
}
inline const ::biot::BiotAppProduct& BiotAppParam::product() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppParam.product)
  return _internal_product();
}
inline void BiotAppParam::unsafe_arena_set_allocated_product(
    ::biot::BiotAppProduct* product) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.product_);
  }
  _impl_.product_ = product;
  if (product) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:biot.BiotAppParam.product)
}
inline ::biot::BiotAppProduct* BiotAppParam::release_product() {
  
  ::biot::BiotAppProduct* temp = _impl_.product_;
  _impl_.product_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::biot::BiotAppProduct* BiotAppParam::unsafe_arena_release_product() {
  // @@protoc_insertion_point(field_release:biot.BiotAppParam.product)
  
  ::biot::BiotAppProduct* temp = _impl_.product_;
  _impl_.product_ = nullptr;
  return temp;
}
inline ::biot::BiotAppProduct* BiotAppParam::_internal_mutable_product() {
  
  if (_impl_.product_ == nullptr) {
    auto* p = CreateMaybeMessage<::biot::BiotAppProduct>(GetArenaForAllocation());
    _impl_.product_ = p;
  }
  return _impl_.product_;
}
inline ::biot::BiotAppProduct* BiotAppParam::mutable_product() {
  ::biot::BiotAppProduct* _msg = _internal_mutable_product();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppParam.product)
  return _msg;
}
inline void BiotAppParam::set_allocated_product(::biot::BiotAppProduct* product) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.product_);
  }
  if (product) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(product));
    if (message_arena != submessage_arena) {
      product = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, product, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.product_ = product;
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppParam.product)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace biot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_param_2eproto
