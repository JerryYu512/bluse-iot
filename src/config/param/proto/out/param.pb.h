// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: param.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_param_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_param_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "param_basic.pb.h"
#include "param_system.pb.h"
#include "param_module.pb.h"
#include "param_product.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_param_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_param_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_param_2eproto;
namespace biot {
class BiotAppParam;
struct BiotAppParamDefaultTypeInternal;
extern BiotAppParamDefaultTypeInternal _BiotAppParam_default_instance_;
}  // namespace biot
PROTOBUF_NAMESPACE_OPEN
template<> ::biot::BiotAppParam* Arena::CreateMaybeMessage<::biot::BiotAppParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace biot {

// ===================================================================

class BiotAppParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:biot.BiotAppParam) */ {
 public:
  inline BiotAppParam() : BiotAppParam(nullptr) {}
  ~BiotAppParam() override;
  explicit PROTOBUF_CONSTEXPR BiotAppParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BiotAppParam(const BiotAppParam& from);
  BiotAppParam(BiotAppParam&& from) noexcept
    : BiotAppParam() {
    *this = ::std::move(from);
  }

  inline BiotAppParam& operator=(const BiotAppParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline BiotAppParam& operator=(BiotAppParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BiotAppParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const BiotAppParam* internal_default_instance() {
    return reinterpret_cast<const BiotAppParam*>(
               &_BiotAppParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BiotAppParam& a, BiotAppParam& b) {
    a.Swap(&b);
  }
  inline void Swap(BiotAppParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BiotAppParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BiotAppParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BiotAppParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BiotAppParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BiotAppParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BiotAppParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "biot.BiotAppParam";
  }
  protected:
  explicit BiotAppParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kExecIdFieldNumber = 2,
    kDeviceNameFieldNumber = 4,
    kVersionFieldNumber = 3,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string exec_id = 2;
  void clear_exec_id();
  const std::string& exec_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exec_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exec_id();
  PROTOBUF_NODISCARD std::string* release_exec_id();
  void set_allocated_exec_id(std::string* exec_id);
  private:
  const std::string& _internal_exec_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exec_id(const std::string& value);
  std::string* _internal_mutable_exec_id();
  public:

  // string device_name = 4;
  void clear_device_name();
  const std::string& device_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* device_name);
  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(const std::string& value);
  std::string* _internal_mutable_device_name();
  public:

  // uint32 version = 3;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:biot.BiotAppParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exec_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
    uint32_t version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_param_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BiotAppParam

// string uuid = 1;
inline void BiotAppParam::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
}
inline const std::string& BiotAppParam::uuid() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppParam.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiotAppParam::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:biot.BiotAppParam.uuid)
}
inline std::string* BiotAppParam::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppParam.uuid)
  return _s;
}
inline const std::string& BiotAppParam::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void BiotAppParam::_internal_set_uuid(const std::string& value) {
  
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* BiotAppParam::_internal_mutable_uuid() {
  
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* BiotAppParam::release_uuid() {
  // @@protoc_insertion_point(field_release:biot.BiotAppParam.uuid)
  return _impl_.uuid_.Release();
}
inline void BiotAppParam::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppParam.uuid)
}

// string exec_id = 2;
inline void BiotAppParam::clear_exec_id() {
  _impl_.exec_id_.ClearToEmpty();
}
inline const std::string& BiotAppParam::exec_id() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppParam.exec_id)
  return _internal_exec_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiotAppParam::set_exec_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.exec_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:biot.BiotAppParam.exec_id)
}
inline std::string* BiotAppParam::mutable_exec_id() {
  std::string* _s = _internal_mutable_exec_id();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppParam.exec_id)
  return _s;
}
inline const std::string& BiotAppParam::_internal_exec_id() const {
  return _impl_.exec_id_.Get();
}
inline void BiotAppParam::_internal_set_exec_id(const std::string& value) {
  
  _impl_.exec_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BiotAppParam::_internal_mutable_exec_id() {
  
  return _impl_.exec_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BiotAppParam::release_exec_id() {
  // @@protoc_insertion_point(field_release:biot.BiotAppParam.exec_id)
  return _impl_.exec_id_.Release();
}
inline void BiotAppParam::set_allocated_exec_id(std::string* exec_id) {
  if (exec_id != nullptr) {
    
  } else {
    
  }
  _impl_.exec_id_.SetAllocated(exec_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.exec_id_.IsDefault()) {
    _impl_.exec_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppParam.exec_id)
}

// uint32 version = 3;
inline void BiotAppParam::clear_version() {
  _impl_.version_ = 0u;
}
inline uint32_t BiotAppParam::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t BiotAppParam::version() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppParam.version)
  return _internal_version();
}
inline void BiotAppParam::_internal_set_version(uint32_t value) {
  
  _impl_.version_ = value;
}
inline void BiotAppParam::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:biot.BiotAppParam.version)
}

// string device_name = 4;
inline void BiotAppParam::clear_device_name() {
  _impl_.device_name_.ClearToEmpty();
}
inline const std::string& BiotAppParam::device_name() const {
  // @@protoc_insertion_point(field_get:biot.BiotAppParam.device_name)
  return _internal_device_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BiotAppParam::set_device_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.device_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:biot.BiotAppParam.device_name)
}
inline std::string* BiotAppParam::mutable_device_name() {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:biot.BiotAppParam.device_name)
  return _s;
}
inline const std::string& BiotAppParam::_internal_device_name() const {
  return _impl_.device_name_.Get();
}
inline void BiotAppParam::_internal_set_device_name(const std::string& value) {
  
  _impl_.device_name_.Set(value, GetArenaForAllocation());
}
inline std::string* BiotAppParam::_internal_mutable_device_name() {
  
  return _impl_.device_name_.Mutable(GetArenaForAllocation());
}
inline std::string* BiotAppParam::release_device_name() {
  // @@protoc_insertion_point(field_release:biot.BiotAppParam.device_name)
  return _impl_.device_name_.Release();
}
inline void BiotAppParam::set_allocated_device_name(std::string* device_name) {
  if (device_name != nullptr) {
    
  } else {
    
  }
  _impl_.device_name_.SetAllocated(device_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.device_name_.IsDefault()) {
    _impl_.device_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:biot.BiotAppParam.device_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace biot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_param_2eproto
